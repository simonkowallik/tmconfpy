{
    "apm application-family /Common/Audio": {
        "id": "16588"
    },
    "apm application-family /Common/Audio_Video": {
        "id": "16590"
    },
    "apm application-family /Common/Instant_Messaging": {
        "id": "16476"
    },
    "apm application-family /Common/Music": {
        "id": "16574"
    },
    "apm application-family /Common/News_and_Media": {
        "id": "16538"
    },
    "apm application-family /Common/Unknown": {
        "id": "16579"
    },
    "apm application-family /Common/Video": {
        "id": "16589"
    },
    "apm application-family /Common/Web_Based_Email": {
        "id": "16573"
    },
    "apm application /Common/archive_audio": {
        "app-family": "/Common/Audio",
        "app-family-id": "16588",
        "description": "\"Internet Archive is an online digital library that holds digitized materials such as website histories, music, movies, images and digital books. This classification will match Archive's audio content.\"",
        "id": "4018"
    },
    "apm application /Common/http_file_audio": {
        "app-family": "/Common/Audio",
        "app-family-id": "16588",
        "description": "\"This classification will match common audio files transferred over HTTP\"",
        "id": "4071"
    },
    "apm application /Common/abcnews_video": {
        "app-family": "/Common/Audio_Video",
        "app-family-id": "16590",
        "description": "\"ABC News is a website providing world news, broadcast video coverage, interviews and journalist's columns. This classification will match ABC News' video content.\"",
        "id": "4062"
    },
    "apm application /Common/itunes": {
        "app-family": "/Common/Audio_Video",
        "app-family-id": "16590",
        "description": "\"iTunes is an Apple proprietary digital media player application, used for playing and organizing digital music and video files.\"",
        "id": "530"
    },
    "apm application /Common/youtube_video": {
        "app-family": "/Common/Audio_Video",
        "app-family-id": "16590",
        "description": "\"YouTube is a video-sharing website on which users can upload, view and share a variety of video content. This classification will match YouTube's video content.\"",
        "id": "4052"
    },
    "apm application /Common/skype": {
        "app-family": "/Common/Instant_Messaging",
        "app-family-id": "16476",
        "description": "\"Skype provides a software and mobile application that allows users to make voice and video calls and chat over the internet.\"",
        "id": "183"
    },
    "apm application /Common/skype_login": {
        "app-family": "/Common/Instant_Messaging",
        "app-family-id": "16476",
        "description": "\"Skype is a widely used free voice over IP protocol. This classification will match Skype's user login (user and password authentication process) when Skype client starts.\"",
        "id": "4183"
    },
    "apm application /Common/skype_update": {
        "app-family": "/Common/Instant_Messaging",
        "app-family-id": "16476",
        "description": "\"Skype is a widely used free voice over IP protocol. This classification will match Skype's update traffic (update of client version).\"",
        "id": "4184"
    },
    "apm application /Common/grooveshark": {
        "app-family": "/Common/Music",
        "app-family-id": "16574",
        "description": "\"Grooveshark is a free web-based music application that enables internet users listen to music on-demand.\"",
        "id": "532"
    },
    "apm application /Common/imesh": {
        "app-family": "/Common/Music",
        "app-family-id": "16574",
        "description": "\"IMesh is a free music sharing and downloading website.\"",
        "id": "271"
    },
    "apm application /Common/spotify": {
        "app-family": "/Common/Music",
        "app-family-id": "16574",
        "description": "\"Spotify is a commercial music streaming service that provides restricted digital content from a range of record labels and artists. Users can browse through the interface by artist, album, genre, playlist, record label, and direct searches.\"",
        "id": "534"
    },
    "apm application /Common/cnn_video": {
        "app-family": "/Common/News_and_Media",
        "app-family-id": "16538",
        "description": "\"CNN.com is one of the most popular news websites in the world with reports and stories, blogs, user-generated content and live broadcasts.\"",
        "id": "4029"
    },
    "apm application /Common/archive_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Internet Archive is an online digital library that holds digitized materials as websites history, music, movies, images and digital books. This classification will match Archive's video content.\"",
        "id": "4017"
    },
    "apm application /Common/blip_tv_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Blip is a website for streaming original web series video content. This classification will match Blip's video content.\"",
        "id": "4001"
    },
    "apm application /Common/cnet_video_request": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"CNET website publishes content related to technology and consumer electronics. This classification will match CNET's video request, not the video content.\"",
        "id": "4003"
    },
    "apm application /Common/dailymotion_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Dailymotion is a website on which users can upload, share and view videos.\"",
        "id": "4030"
    },
    "apm application /Common/flixster_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Flixster is a website allowing users to share movie ratings and view movie information and trailers. This classification will match Flixster's video content.\"",
        "id": "4032"
    },
    "apm application /Common/foxnews_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Fox News website features news reports, journalists columns, video clips and live streaming videos with global news. This classification will match Fox News' video content.\"",
        "id": "4059"
    },
    "apm application /Common/foxsports_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Fox Sports holds a variety of sports-related content including live and recorded video content. This classification will match Fox Sports's video content.\"",
        "id": "4034"
    },
    "apm application /Common/howstuffworks_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"HowStuffWorks is a edutainment website providing an insight into how things work using photographs, diagrams, videos, animations and articles.\"",
        "id": "4037"
    },
    "apm application /Common/howstuffworks_video_control": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"HowStuffWorks is a edutainment website providing an insight into how things work using photographs, diagrams, videos, animations and articles.\"",
        "id": "4038"
    },
    "apm application /Common/http_file_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"This classification will match common video files transferred over HTTP\"",
        "id": "4070"
    },
    "apm application /Common/imdb_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"IMDb (Internet Movie Database) is a website holding information related to films, television programs, and video games, providing reviews, ratings and video trailers. This classification will match IMDb's video content.\"",
        "id": "4065"
    },
    "apm application /Common/metacafe_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Metacafe is a video-sharing website holding mainly entertainment related content.\"",
        "id": "4008"
    },
    "apm application /Common/netflix": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"NetFlix is a site using Silverlight protocol to stream videos.\"",
        "id": "734"
    },
    "apm application /Common/sky_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Sky is a media entertainment corporation, holding among other websites skynews.com, its news channel; it provides a variety of media such as articles and streaming video.\"",
        "id": "4099"
    },
    "apm application /Common/ustream_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Ustream is a website providing a platform for lifecasting and live video streaming of events online. This classification will match Ustream's video content.\"",
        "id": "4045"
    },
    "apm application /Common/vimeo_video": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Vimeo is a video-sharing website on which users can upload, share and view videos.\"",
        "id": "4048"
    },
    "apm application /Common/vimeo_video_control": {
        "app-family": "/Common/Video",
        "app-family-id": "16589",
        "description": "\"Vimeo is a video-sharing website on which users can upload, share and view videos.\"",
        "id": "4049"
    },
    "apm application /Common/outlook": {
        "app-family": "/Common/Web_Based_Email",
        "app-family-id": "16573",
        "description": "\"Outlook, previously known as Hotmail, is a free webmail service operated by Microsoft.\"",
        "id": "1478"
    },
    "apm application /Common/ymail2": {
        "app-family": "/Common/Web_Based_Email",
        "app-family-id": "16573",
        "description": "\"Yahoo Webmail is a free service that provides with an e-mail functionality by Yahoo.\"",
        "id": "236"
    },
    "apm application /Common/unknown": {
        "app-family": "/Common/Unknown",
        "app-family-id": "16579",
        "description": "\"Unknown classification\"",
        "id": "4"
    },
    "apm application-filter allow-all": {
        "allowed-applications": [
            "/Common/abcnews_video",
            "/Common/archive_audio",
            "/Common/archive_video",
            "/Common/blip_tv_video",
            "/Common/cnet_video_request",
            "/Common/cnn_video",
            "/Common/dailymotion_video",
            "/Common/flixster_video",
            "/Common/foxnews_video",
            "/Common/foxsports_video",
            "/Common/grooveshark",
            "/Common/howstuffworks_video",
            "/Common/howstuffworks_video_control",
            "/Common/http_file_audio",
            "/Common/http_file_video",
            "/Common/imdb_video",
            "/Common/imesh",
            "/Common/itunes",
            "/Common/outlook",
            "/Common/metacafe_video",
            "/Common/netflix",
            "/Common/sky_video",
            "/Common/skype",
            "/Common/skype_update",
            "/Common/skype_login",
            "/Common/spotify",
            "/Common/unknown",
            "/Common/ustream_video",
            "/Common/vimeo_video",
            "/Common/vimeo_video_control",
            "/Common/ymail2",
            "/Common/youtube_video"
        ]
    },
    "apm application-filter block-all": {
        "blocked-applications": [
            "/Common/abcnews_video",
            "/Common/archive_audio",
            "/Common/archive_video",
            "/Common/blip_tv_video",
            "/Common/cnet_video_request",
            "/Common/cnn_video",
            "/Common/dailymotion_video",
            "/Common/flixster_video",
            "/Common/foxnews_video",
            "/Common/foxsports_video",
            "",
            "/Common/grooveshark",
            "/Common/howstuffworks_video",
            "/Common/howstuffworks_video_control",
            "/Common/http_file_audio",
            "/Common/http_file_video",
            "/Common/imdb_video",
            "/Common/imesh",
            "/Common/itunes",
            "/Common/outlook",
            "/Common/metacafe_video",
            "/Common/netflix",
            "/Common/sky_video",
            "/Common/skype",
            "/Common/skype_update",
            "/Common/skype_login",
            "/Common/spotify",
            "/Common/unknown",
            "/Common/ustream_video",
            "/Common/vimeo_video",
            "/Common/vimeo_video_control",
            "/Common/ymail2",
            "/Common/youtube_video"
        ]
    },
    "apm application-filter default": {
        "allowed-applications": [
            "/Common/outlook",
            "/Common/skype",
            "/Common/skype_update",
            "/Common/skype_login",
            "/Common/ymail2"
        ],
        "blocked-applications": [
            "/Common/abcnews_video",
            "/Common/archive_audio",
            "/Common/archive_video",
            "/Common/blip_tv_video",
            "/Common/cnet_video_request",
            "/Common/cnn_video",
            "/Common/dailymotion_video",
            "/Common/flixster_video",
            "/Common/foxnews_video",
            "/Common/foxsports_video",
            "/Common/grooveshark",
            "/Common/howstuffworks_video",
            "/Common/howstuffworks_video_control",
            "/Common/http_file_audio",
            "/Common/http_file_video",
            "/Common/imdb_video",
            "/Common/imesh",
            "/Common/itunes",
            "/Common/metacafe_video",
            "/Common/netflix",
            "/Common/sky_video",
            "/Common/spotify",
            "/Common/unknown",
            "/Common/ustream_video",
            "/Common/vimeo_video",
            "/Common/vimeo_video_control",
            "/Common/youtube_video"
        ]
    },
    "apm policy customization-source /Common/standard": {},
    "apm policy customization-source /Common/modern": {},
    "apm resource address-space default-all": {
        "description": "\"All IPv4, IPv6 and DNS\"",
        "dns": [
            "*"
        ],
        "ipv4": [
            "0.0.0.0/0"
        ],
        "ipv6": [
            "::/0"
        ]
    },
    "asm response-code 100": {
        "name": "\"Continue\""
    },
    "asm response-code 101": {
        "name": "\"Switching Protocols\""
    },
    "asm response-code 102": {
        "name": "\"Processing\""
    },
    "asm response-code 200": {
        "name": "\"OK\""
    },
    "asm response-code 201": {
        "name": "\"Created\""
    },
    "asm response-code 202": {
        "name": "\"Accepted\""
    },
    "asm response-code 203": {
        "name": "\"Non-Authoritative Information\""
    },
    "asm response-code 204": {
        "name": "\"No Content\""
    },
    "asm response-code 205": {
        "name": "\"Reset Content\""
    },
    "asm response-code 206": {
        "name": "\"Partial Content\""
    },
    "asm response-code 207": {
        "name": "\"Multi Status\""
    },
    "asm response-code 300": {
        "name": "\"Multiple Choices\""
    },
    "asm response-code 301": {
        "name": "\"Moved Permanently\""
    },
    "asm response-code 302": {
        "name": "\"Found\""
    },
    "asm response-code 303": {
        "name": "\"See Other\""
    },
    "asm response-code 304": {
        "name": "\"Not Modified\""
    },
    "asm response-code 305": {
        "name": "\"Use Proxy\""
    },
    "asm response-code 306": {
        "name": "\"(Unused)\""
    },
    "asm response-code 307": {
        "name": "\"Temporary Redirect\""
    },
    "asm response-code 400": {
        "name": "\"Bad Request\""
    },
    "asm response-code 401": {
        "name": "\"Unauthorized\""
    },
    "asm response-code 402": {
        "name": "\"Payment Required\""
    },
    "asm response-code 403": {
        "name": "\"Forbidden\""
    },
    "asm response-code 404": {
        "name": "\"Not Found\""
    },
    "asm response-code 405": {
        "name": "\"Method Not Allowed\""
    },
    "asm response-code 406": {
        "name": "\"Not Acceptable\""
    },
    "asm response-code 407": {
        "name": "\"Proxy Authentication Required\""
    },
    "asm response-code 408": {
        "name": "\"Request Timeout\""
    },
    "asm response-code 409": {
        "name": "\"Conflict\""
    },
    "asm response-code 410": {
        "name": "\"Gone\""
    },
    "asm response-code 411": {
        "name": "\"Length Required\""
    },
    "asm response-code 412": {
        "name": "\"Precondition Failed\""
    },
    "asm response-code 413": {
        "name": "\"Request Entity Too Large\""
    },
    "asm response-code 414": {
        "name": "\"Request-URI Too Long\""
    },
    "asm response-code 415": {
        "name": "\"Unsupported Media Type\""
    },
    "asm response-code 416": {
        "name": "\"Requested Range Not Satisfiable\""
    },
    "asm response-code 417": {
        "name": "\"Expectation Failed\""
    },
    "asm response-code 422": {
        "name": "\"Unprocessable Entity\""
    },
    "asm response-code 423": {
        "name": "\"Locked\""
    },
    "asm response-code 424": {
        "name": "\"Failed Dependency\""
    },
    "asm response-code 500": {
        "name": "\"Internal Server Error\""
    },
    "asm response-code 501": {
        "name": "\"Not Implemented\""
    },
    "asm response-code 502": {
        "name": "\"Bad Gateway\""
    },
    "asm response-code 503": {
        "name": "\"Service Unavailable\""
    },
    "asm response-code 504": {
        "name": "\"Gateway Timeout\""
    },
    "asm response-code 505": {
        "name": "\"Version Not Supported\""
    },
    "asm response-code 506": {
        "name": "\"Variant Also Varies\""
    },
    "asm response-code 507": {
        "name": "\"Insufficient Storage\""
    },
    "asm response-code 510": {
        "name": "\"Not Extended\""
    },
    "asm http-method GET": {
        "code": "1"
    },
    "asm http-method POST": {
        "code": "2",
        "default-act-as": "/Common/POST"
    },
    "asm http-method OPTIONS": {
        "code": "3"
    },
    "asm http-method HEAD": {
        "code": "4"
    },
    "asm http-method PUT": {
        "code": "5"
    },
    "asm http-method DELETE": {
        "code": "6"
    },
    "asm http-method TRACE": {
        "code": "7"
    },
    "asm http-method CONNECT": {
        "code": "8"
    },
    "asm http-method PROPPATCH": {
        "code": "9"
    },
    "asm http-method ACL": {
        "code": "10"
    },
    "asm http-method PROPFIND": {
        "code": "11"
    },
    "asm http-method COPY": {
        "code": "12"
    },
    "asm http-method MOVE": {
        "code": "13"
    },
    "asm http-method LOCK": {
        "code": "14"
    },
    "asm http-method MKCOL": {
        "code": "15"
    },
    "asm http-method UNLOCK": {
        "code": "16"
    },
    "asm http-method CHECKOUT": {
        "code": "17"
    },
    "asm http-method CHECKIN": {
        "code": "18"
    },
    "asm http-method REPORT": {
        "code": "19"
    },
    "asm http-method VERSION_CONTROL": {
        "code": "20"
    },
    "asm http-method MERGE": {
        "code": "21"
    },
    "asm http-method POLL": {
        "code": "22"
    },
    "asm http-method SUBSCRIBE": {
        "code": "23"
    },
    "asm http-method SEARCH": {
        "code": "24",
        "default-act-as": "/Common/POST"
    },
    "asm http-method BCOPY": {
        "code": "25",
        "default-act-as": "/Common/POST"
    },
    "asm http-method BDELETE": {
        "code": "26",
        "default-act-as": "/Common/POST"
    },
    "asm http-method BMOVE": {
        "code": "27",
        "default-act-as": "/Common/POST"
    },
    "asm http-method BPROPFIND": {
        "code": "28",
        "default-act-as": "/Common/POST"
    },
    "asm http-method BPROPPATCH": {
        "code": "29",
        "default-act-as": "/Common/POST"
    },
    "asm http-method NOTIFY": {
        "code": "30"
    },
    "asm http-method UNSUBSCRIBE": {
        "code": "31"
    },
    "asm http-method X-MS-ENUMATTS": {
        "code": "32"
    },
    "asm http-method PATCH": {
        "code": "33",
        "default-act-as": "/Common/POST"
    },
    "asm http-method LINK": {
        "code": "34",
        "default-act-as": "/Common/POST"
    },
    "asm http-method UNLINK": {
        "code": "35",
        "default-act-as": "/Common/POST"
    },
    "asm http-method RPC_IN_DATA": {
        "code": "36",
        "default-act-as": "/Common/POST"
    },
    "asm http-method RPC_OUT_DATA": {
        "code": "37",
        "default-act-as": "/Common/POST"
    },
    "asm http-method TRACK": {
        "code": "98"
    },
    "asm http-method MKWORKSPACE": {
        "code": "99",
        "default-act-as": "/Common/POST"
    },
    "asm health-alerts {}sys provision ltm": {},
    "net self-allow": {
        "defaults": {
            "igmp:any": "",
            "ospf:any": "",
            "pim:any": "",
            "tcp:161": "",
            "tcp:22": "",
            "tcp:4353": "",
            "tcp:443": "",
            "tcp:53": "",
            "udp:1026": "",
            "udp:161": "",
            "udp:4353": "",
            "udp:520": "",
            "udp:53": ""
        }
    },
    "sys snmp": {
        "communities": {
            "/Common/comm-public": {
                "community-name": "public",
                "source": "default"
            }
        },
        "disk-monitors": {
            "/Common/root": {
                "minspace": "2000",
                "path": "/"
            },
            "/Common/var": {
                "minspace": "10000",
                "path": "/var"
            }
        },
        "process-monitors": {
            "/Common/bigd": {
                "max-processes": "infinity",
                "process": "bigd"
            },
            "/Common/chmand": {
                "process": "chmand"
            },
            "/Common/httpd": {
                "max-processes": "infinity",
                "process": "httpd"
            },
            "/Common/mcpd": {
                "process": "mcpd"
            },
            "/Common/sod": {
                "process": "sod"
            },
            "/Common/tmm": {
                "max-processes": "infinity",
                "process": "tmm"
            }
        }
    },
    "sys software update": {},
    "ltm cipher rule /Common/f5-aes": {
        "cipher": "AES-GCM:AES",
        "description": "\"Cipher suites that use the AES cipher.\"",
        "dh-groups": "DEFAULT",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-default": {
        "cipher": "DEFAULT",
        "description": "\"The recommended default cipher suites.\"",
        "dh-groups": "DEFAULT",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-ecc": {
        "cipher": "ECDHE:ECDHE_ECDSA",
        "description": "\"Cipher suites that utilize Elliptical Curve Ephemeral Diffie-Hellman key exchange.\"",
        "dh-groups": "DEFAULT",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-hw_keys": {
        "cipher": "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-CBC-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDH-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-SHA384:ECDH-RSA-AES256-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:DHE-RSA-DES-CBC3-SHA:ECDH-RSA-DES-CBC3-SHA:DES-CBC3-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-CBC-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES128-SHA256:ECDH-RSA-AES128-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:RC4-SHA:RC4-MD5:DHE-RSA-DES-CBC-SHA:DHE-RSA-CAMELLIA256-SHA:CAMELLIA256-SHA:DHE-RSA-CAMELLIA128-SHA:!TLSv1:!TLSv1_1:!SSLv3:!DTLSv1",
        "description": "\"Cipher suites eligible for use with a Hardware Security Module.\"",
        "dh-groups": "DEFAULT",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-secure": {
        "cipher": "ECDHE:RSA:ECDHE_ECDSA:!SSLV3:!RC4:!EXP:!DES:!3DES:TLSV1_3",
        "description": "\"Cipher suites that maximize regulatory compliance.\"",
        "dh-groups": "DEFAULT",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-quic": {
        "cipher": "TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384",
        "description": "\"Cipher suites usable by QUIC.\"",
        "dh-groups": "DEFAULT",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-fips": {
        "cipher": "fips",
        "description": "\"Cipher suites usable by FIPS\"",
        "dh-groups": "P256:P384:FFDHE2048:FFDHE3072:FFDHE4096",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher rule /Common/f5-cc-stip": {
        "cipher": "CC_STIP",
        "description": "\"Cipher suites usable by CC/STIP.\"",
        "dh-groups": "P256:P384:FFDHE2048:FFDHE3072:FFDHE4096",
        "signature-algorithms": "DEFAULT"
    },
    "ltm cipher group f5-aes": {
        "allow": {
            "/Common/f5-aes": ""
        }
    },
    "ltm cipher group /Common/f5-default": {
        "allow": {
            "/Common/f5-default": {}
        }
    },
    "ltm cipher group /Common/f5-ecc": {
        "allow": {
            "/Common/f5-ecc": ""
        }
    },
    "ltm cipher group /Common/f5-hw_keys": {
        "allow": {
            "/Common/f5-hw_keys": ""
        }
    },
    "ltm cipher group /Common/f5-secure": {
        "allow": {
            "/Common/f5-secure": ""
        }
    },
    "ltm cipher group /Common/f5-quic": {
        "allow": {
            "/Common/f5-quic": ""
        }
    },
    "ltm cipher group /Common/f5-fips": {
        "allow": {
            "/Common/f5-fips": {}
        }
    },
    "ltm cipher group /Common/f5-cc-stip": {
        "allow": {
            "/Common/f5-cc-stip": {}
        }
    },
    "ltm profile certificate-authority certificateauthority": {
        "ca-file": "none",
        "crl-file": "none",
        "authenticate-depth": "9",
        "update-crl": "false"
    },
    "ltm profile client-ssl clientssl": {
        "alert-timeout": "indefinite",
        "allow-dynamic-record-sizing": "disabled",
        "authenticate": "once",
        "authenticate-depth": "9",
        "ca-file": "none",
        "cache-size": "262144",
        "cache-timeout": "3600",
        "cert-extension-includes": [
            "basic-constraints",
            "subject-alternative-name"
        ],
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "chain": "none",
                "key": "/Common/default.key",
                "passphrase": "none"
            }
        },
        "cert": "/Common/default.crt",
        "chain": "none",
        "ciphers": "DEFAULT",
        "client-cert-ca": "none",
        "crl-file": "none",
        "handshake-timeout": "10",
        "key": "/Common/default.key",
        "maximum-record-size": "16384",
        "mod-ssl-methods": "disabled",
        "mode": "enabled",
        "options": [
            "dont-insert-empty-fragments",
            "no-tlsv1.3",
            "no-dtlsv1.2"
        ],
        "passphrase": "none",
        "peer-cert-mode": "ignore",
        "renegotiate-max-record-delay": "indefinite",
        "renegotiate-period": "indefinite",
        "renegotiate-size": "indefinite",
        "renegotiation": "enabled",
        "secure-renegotiation": "require",
        "strict-resume": "disabled",
        "unclean-shutdown": "enabled",
        "peer-no-renegotiate-timeout": "10",
        "log-publisher": "/Common/sys-ssl-publisher"
    },
    "ltm profile client-ssl clientssl-insecure-compatible": {
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "chain": "none",
                "key": "/Common/default.key",
                "passphrase": "none"
            }
        },
        "cert": "/Common/default.crt",
        "chain": "none",
        "key": "/Common/default.key",
        "passphrase": "none",
        "ciphers": "ALL:!DH:!ADH:!EDH:@SPEED",
        "defaults-from": "/Common/clientssl",
        "inherit-certkeychain": "true",
        "renegotiation": "enabled",
        "secure-renegotiation": "request"
    },
    "ltm profile client-ssl wom-default-clientssl": {
        "allow-non-ssl": "enabled",
        "defaults-from": "/Common/clientssl",
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "chain": "none",
                "key": "/Common/default.key",
                "passphrase": "none"
            }
        },
        "cert": "/Common/default.crt",
        "chain": "none",
        "key": "/Common/default.key",
        "passphrase": "none",
        "inherit-certkeychain": "true"
    },
    "ltm profile client-ssl crypto-server-default-clientssl": {
        "defaults-from": "/Common/clientssl",
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "chain": "none",
                "key": "/Common/default.key",
                "passphrase": "none"
            }
        },
        "cert": "/Common/default.crt",
        "chain": "none",
        "key": "/Common/default.key",
        "passphrase": "none",
        "inherit-certkeychain": "true",
        "ciphers": "DHE-RSA-AES256-GCM-SHA384",
        "renegotiate-period": "21600",
        "cache-size": "0"
    },
    "ltm profile client-ssl clientssl-secure": {
        "app-service": "none",
        "cert": "/Common/default.crt",
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "key": "/Common/default.key"
            }
        },
        "chain": "none",
        "ciphers": "ecdhe:rsa:!sslv3:!rc4:!exp:!des",
        "defaults-from": "/Common/clientssl",
        "inherit-certkeychain": "true",
        "key": "/Common/default.key",
        "options": [
            "no-ssl",
            "no-tlsv1.3"
        ],
        "passphrase": "none",
        "renegotiation": "disabled"
    },
    "ltm profile client-ssl splitsession-default-clientssl": {
        "defaults-from": "/Common/clientssl",
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "chain": "none",
                "key": "/Common/default.key",
                "passphrase": "none"
            }
        },
        "cert": "/Common/default.crt",
        "chain": "none",
        "key": "/Common/default.key",
        "passphrase": "none",
        "inherit-certkeychain": "true"
    },
    "ltm profile client-ssl clientssl-quic": {
        "app-service": "none",
        "cert": "/Common/default.crt",
        "cert-key-chain": {
            "default": {
                "cert": "/Common/default.crt",
                "key": "/Common/default.key"
            }
        },
        "chain": "none",
        "cipher-group": "/Common/f5-quic",
        "ciphers": "none",
        "data-0rtt": "enabled-with-anti-replay",
        "defaults-from": "/Common/clientssl",
        "inherit-certkeychain": "true",
        "key": "/Common/default.key",
        "options": [
            "dont-insert-empty-fragments",
            "no-ssl",
            "no-dtls",
            "no-tlsv1.1",
            "no-tlsv1.2",
            "no-tlsv1"
        ],
        "passphrase": "none",
        "renegotiation": "disabled",
        "session-ticket": "enabled"
    },
    "ltm profile server-ssl splitsession-default-serverssl": {
        "defaults-from": "/Common/serverssl",
        "cert": "/Common/default.crt",
        "key": "/Common/default.key",
        "mode": "enabled"
    },
    "ltm profile server-ssl cloud-service-default-ssl": {
        "defaults-from": "/Common/serverssl-secure",
        "authenticate": "always",
        "authenticate-depth": "9",
        "authenticate-name": "*.idservice.net",
        "peer-cert-mode": "require",
        "ca-file": "/Common/ca-bundle.crt"
    },
    "ltm profile server-ssl f5aas-default-ssl": {
        "defaults-from": "/Common/serverssl-secure",
        "authenticate": "always",
        "authenticate-depth": "9",
        "authenticate-name": "*.f5aas.com",
        "peer-cert-mode": "require",
        "ca-file": "/Common/ca-bundle.crt"
    },
    "ltm profile server-ssl shape-api-ssl": {
        "app-service": "none",
        "defaults-from": "/Common/serverssl",
        "secure-renegotiation": "require-strict",
        "server-name": "bf.shpapi.com"
    },
    "ltm profile dns dns": {
        "enable-gtm": "yes"
    },
    "ltm profile dns-acceleration dns-acceleration": {},
    "ltm profile doh-server doh-server": {},
    "ltm profile doh-proxy doh-proxy": {},
    "ltm profile diameter diameter": {
        "persist-avp": "Session-Id"
    },
    "ltm message-routing diameter profile session diametersession": {},
    "ltm message-routing diameter profile router diameterrouter": {},
    "ltm profile request-adapt requestadapt": {},
    "ltm profile response-adapt responseadapt": {},
    "ltm profile icap icap": {},
    "ltm profile connector connector": {},
    "ltm profile service service": {},
    "ltm profile ocsp ocsp": {},
    "ltm profile qoe qoe": {},
    "ltm message-routing generic protocol genericmsg": {},
    "ltm message-routing generic router messagerouter": {},
    "ltm profile traffic-acceleration traffic-acceleration": {},
    "ltm profile gtp gtp": {},
    "ltm profile fix fix": {},
    "ltm profile mr-ratelimit mr-ratelimit": {},
    "ltm profile georedundancy georedundancy": {},
    "ltm message-routing mqtt profile router mqttrouter": {},
    "ltm message-routing mqtt profile session mqttsession": {},
    "ltm message-routing sip profile router siprouter": {
        "operation-mode": "load-balancing"
    },
    "ltm message-routing sip profile router siprouter-alg": {
        "defaults-from": "/Common/siprouter",
        "operation-mode": "application-level-gateway"
    },
    "ltm message-routing sip profile session sipsession": {
        "max-msg-size": "65535",
        "generate-response-on-failure": "disabled",
        "max-forwards-check": "enabled",
        "persistence": {
            "persist-type": "session",
            "persist-key": "Call-ID",
            "persist-timeout": "180"
        }
    },
    "ltm message-routing sip profile session sipsession-alg": {
        "max-msg-size": "65535",
        "insert-via-header": "disabled",
        "honor-via": "disabled",
        "generate-response-on-failure": "disabled",
        "max-forwards-check": "disabled",
        "persistence": {
            "persist-type": "none"
        }
    },
    "ltm profile fasthttp fasthttp": {
        "client-close-timeout": "5",
        "connpool-idle-timeout-override": "0",
        "connpool-max-reuse": "0",
        "connpool-max-size": "2048",
        "connpool-min-size": "0",
        "connpool-step": "4",
        "header-insert": "none",
        "idle-timeout": "300",
        "insert-xforwarded-for": "disabled",
        "layer-7": "enabled",
        "max-header-size": "32768",
        "max-requests": "0",
        "mss-override": "0",
        "reset-on-timeout": "enabled",
        "server-close-timeout": "5"
    },
    "ltm profile fastl4 fastL4": {
        "idle-timeout": "300",
        "mss-override": "0",
        "pva-acceleration": "full",
        "reassemble-fragments": "disabled",
        "reset-on-timeout": "enabled"
    },
    "ltm profile fastl4 security-fastL4": {
        "idle-timeout": "60",
        "other-pva-offload-direction": "server-to-client-only",
        "pva-offload-dynamic": "enabled",
        "rtt-from-client": "enabled",
        "tcp-pva-offload-direction": "server-to-client-only",
        "tcp-pva-whento-offload": "establish"
    },
    "ltm profile netflow netflow": {},
    "ltm profile fastl4 full-acceleration": {},
    "ltm profile ftp ftp": {},
    "ltm profile tftp tftp": {},
    "ltm profile ipsecalg ipsecalg": {
        "idle-timeout": "3600",
        "pending-ike-connection-limit": "5",
        "initial-connection-timeout": "3"
    },
    "ltm profile html html": {
        "content-selection": [
            "text/html",
            "text/xhtml"
        ]
    },
    "ltm profile http http": {
        "basic-auth-realm": "none",
        "lws-width": "80",
        "oneconnect-transformations": "enabled",
        "oneconnect-status-reuse": "\"200 206\"",
        "proxy-type": "reverse",
        "enforcement": {
            "max-header-count": "64",
            "max-header-size": "32768",
            "pipeline": "allow",
            "unknown-method": "allow"
        },
        "request-chunking": "sustain",
        "response-chunking": "sustain"
    },
    "ltm profile http http-transparent": {
        "basic-auth-realm": "none",
        "lws-width": "80",
        "oneconnect-transformations": "enabled",
        "proxy-type": "transparent",
        "enforcement": {
            "max-header-count": "32",
            "excess-client-headers": "pass-through",
            "excess-server-headers": "pass-through",
            "max-header-size": "16384",
            "oversize-client-headers": "pass-through",
            "oversize-server-headers": "pass-through",
            "truncated-redirects": "enabled",
            "pipeline": "allow",
            "unknown-method": "allow"
        },
        "request-chunking": "sustain",
        "response-chunking": "sustain"
    },
    "ltm profile http http-explicit": {
        "basic-auth-realm": "none",
        "lws-width": "80",
        "oneconnect-transformations": "enabled",
        "proxy-type": "explicit",
        "enforcement": {
            "max-header-count": "64",
            "max-header-size": "32768",
            "pipeline": "allow",
            "unknown-method": "allow"
        },
        "request-chunking": "sustain",
        "response-chunking": "sustain",
        "explicit-proxy": {
            "route-domain": "/Common/0",
            "default-connect-handling": "deny",
            "tunnel-name": "/Common/http-tunnel",
            "ipv6": "no"
        }
    },
    "ltm profile httprouter httprouter": {},
    "ltm profile http2 http2": {
        "connection-idle-timeout": "300",
        "insert-header": "disabled",
        "insert-header-name": "X-HTTP2",
        "enforce-tls-requirements": "enabled",
        "include-content-length": "disabled",
        "activation-modes": [
            "alpn"
        ],
        "concurrent-streams-per-connection": "10",
        "receive-window": "32",
        "frame-size": "2048",
        "write-size": "16384",
        "header-table-size": "4096"
    },
    "ltm profile http3 http3": {
        "header-table-size": "4096"
    },
    "ltm profile quic quic": {
        "bidi-concurrent-streams-per-connection": "100",
        "uni-concurrent-streams-per-connection": "10",
        "spin-bit": "enabled"
    },
    "ltm profile websocket websocket": {
        "masking": "selective",
        "compress-mode": "preserved",
        "compression": "enabled",
        "window-bits": "10",
        "no-delay": "enabled",
        "payload-processing-mode": "end-to-end",
        "payload-protocol-profile": "none"
    },
    "ltm profile splitsessionclient splitsessionclient": {},
    "ltm profile splitsessionserver splitsessionserver": {},
    "ltm profile http-proxy-connect http-proxy-connect": {
        "default-state": "enabled"
    },
    "ltm profile pop3 pop3": {
        "activation-mode": "require"
    },
    "ltm profile imap imap": {
        "activation-mode": "require"
    },
    "ltm profile smtps smtps": {
        "activation-mode": "require"
    },
    "ltm profile client-ldap clientldap": {
        "activation-mode": "require"
    },
    "ltm profile server-ldap serverldap": {
        "activation-mode": "none"
    },
    "ltm profile mqtt mqtt": {},
    "ltm profile http-compression httpcompression": {
        "allow-http-10": "disabled",
        "buffer-size": "4096",
        "content-type-exclude": "none",
        "content-type-include": "{ text/ \"application/(xml|x-javascript)\" }",
        "cpu-saver": "enabled",
        "cpu-saver-high": "90",
        "cpu-saver-low": "75",
        "gzip-level": "1",
        "gzip-memory-level": "8k",
        "gzip-window-size": "16k",
        "keep-accept-encoding": "disabled",
        "method-prefer": "gzip",
        "min-size": "1024",
        "selective": "disabled",
        "uri-exclude": "none",
        "uri-include": [
            ".*"
        ],
        "vary-header": "enabled"
    },
    "ltm profile http-compression wan-optimized-compression": {
        "allow-http-10": "enabled",
        "buffer-size": "131072",
        "defaults-from": "/Common/httpcompression",
        "gzip-level": "1",
        "gzip-memory-level": "16k",
        "gzip-window-size": "64k",
        "vary-header": "enabled"
    },
    "ltm profile one-connect oneconnect": {
        "idle-timeout-override": "disabled",
        "max-age": "86400",
        "max-reuse": "1000",
        "max-size": "10000",
        "source-mask": "any"
    },
    "ltm profile pptp pptp": {
        "include-destination-ip": "disabled"
    },
    "ltm profile radius radiusLB": {
        "clients": "none",
        "persist-avp": "none"
    },
    "ltm profile radius radiusLB-subscriber-aware": {
        "defaults-from": "/Common/radiusLB",
        "pem-protocol-profile-radius": "/Common/_sys_radius_proto_imsi",
        "subscriber-discovery": "enabled"
    },
    "ltm profile request-log request-log": {
        "request-logging": "disabled",
        "response-logging": "disabled"
    },
    "ltm profile rewrite rewrite": {
        "client-caching-type": "cache-css-js",
        "bypass-list": "none",
        "rewrite-list": "none",
        "split-tunneling": "false",
        "java-ca-file": "/Common/ca-bundle.crt",
        "java-sign-key": "/Common/default.key",
        "java-signer": "/Common/default.crt"
    },
    "ltm profile ilx ilx": {},
    "ltm profile rewrite rewrite-portal": {
        "rewrite-mode": "portal",
        "java-ca-file": "/Common/ca-bundle.crt",
        "java-sign-key": "/Common/default.key",
        "java-signer": "/Common/default.crt"
    },
    "ltm profile rewrite rewrite-uri-translation": {
        "rewrite-mode": "uri-translation"
    },
    "ltm profile rtsp rtsp": {
        "idle-timeout": "300"
    },
    "ltm profile server-ssl serverssl": {
        "alert-timeout": "indefinite",
        "authenticate": "once",
        "authenticate-depth": "9",
        "authenticate-name": "none",
        "ca-file": "none",
        "cache-size": "262144",
        "cache-timeout": "3600",
        "c3d-cert-extension-includes": [
            "basic-constraints",
            "extended-key-usage",
            "key-usage",
            "subject-alternative-name"
        ],
        "cert": "none",
        "chain": "none",
        "ciphers": "DEFAULT",
        "crl-file": "none",
        "handshake-timeout": "10",
        "key": "none",
        "mod-ssl-methods": "disabled",
        "mode": "enabled",
        "options": [
            "dont-insert-empty-fragments",
            "no-tlsv1.3",
            "no-dtlsv1.2"
        ],
        "passphrase": "none",
        "peer-cert-mode": "ignore",
        "renegotiate-period": "indefinite",
        "renegotiate-size": "indefinite",
        "renegotiation": "enabled",
        "secure-renegotiation": "require-strict",
        "strict-resume": "disabled",
        "unclean-shutdown": "enabled",
        "log-publisher": "/Common/sys-ssl-publisher"
    },
    "ltm profile server-ssl apm-default-serverssl": {
        "ca-file": "/Common/ca-bundle.crt",
        "defaults-from": "/Common/serverssl",
        "peer-cert-mode": "require",
        "secure-renegotiation": "request"
    },
    "ltm profile server-ssl serverssl-insecure-compatible": {
        "ciphers": "!EXPORT:!DH:RSA+RC4:RSA+AES:RSA+DES:RSA+3DES:ECDHE+AES:ECDHE+3DES:@SPEED",
        "defaults-from": "/Common/serverssl",
        "secure-renegotiation": "request"
    },
    "ltm profile server-ssl wom-default-serverssl": {
        "defaults-from": "/Common/serverssl",
        "cert": "/Common/default.crt",
        "key": "/Common/default.key",
        "mode": "disabled"
    },
    "ltm profile server-ssl crypto-client-default-serverssl": {
        "defaults-from": "/Common/serverssl",
        "ciphers": "DHE-RSA-AES256-GCM-SHA384",
        "cache-size": "0"
    },
    "ltm profile server-ssl /Common/serverssl-secure": {
        "app-service": "none",
        "cipher-group": "/Common/f5-secure",
        "ciphers": "none",
        "defaults-from": "/Common/serverssl",
        "options": [
            "no-ssl"
        ],
        "renegotiation": "disabled"
    },
    "ltm profile server-ssl pcoip-default-serverssl": {
        "defaults-from": "/Common/serverssl",
        "server-name": "pcoip-default-sni"
    },
    "ltm profile sctp sctp": {
        "idle-timeout": "300",
        "init-max-retries": "8",
        "receive-ordered": "enabled",
        "receive-window-size": "65535",
        "reset-on-timeout": "enabled",
        "secret": "default",
        "send-buffer-size": "65536",
        "send-max-retries": "10",
        "send-partial": "disabled",
        "tcp-shutdown": "disabled"
    },
    "ltm profile analytics analytics": {
        "collect-server-latency": "enabled",
        "collect-page-load-time": "disabled",
        "collect-url": "disabled",
        "collect-ip": "disabled",
        "collect-geo": "disabled",
        "collect-user-agent": "disabled",
        "collect-http-throughput": "enabled",
        "collect-response-codes": "enabled",
        "collect-methods": "enabled",
        "collect-max-tps-and-throughput": "disabled",
        "publish-irule-statistics": "disabled",
        "collect-user-sessions": "disabled",
        "session-timeout": "300",
        "collected-stats-internal-logging": "enabled",
        "captured-traffic-internal-logging": "disabled",
        "collected-stats-external-logging": "disabled",
        "captured-traffic-external-logging": "disabled",
        "notification-by-syslog": "disabled",
        "notification-by-snmp": "disabled",
        "notification-by-email": "disabled"
    },
    "ltm profile tcp-analytics tcp-analytics": {
        "collected-by-client-side": "enabled",
        "collected-by-server-side": "disabled",
        "collected-stats-internal-logging": "enabled",
        "collect-nexthop": "disabled",
        "collect-continent": "enabled",
        "collect-region": "disabled",
        "collect-city": "disabled",
        "collect-post-code": "disabled",
        "collect-remote-host-ip": "disabled",
        "collect-remote-host-subnet": "enabled",
        "collect-country": "enabled"
    },
    "ltm profile classification classification": {
        "preset": "/Common/ce",
        "irule-event": "on",
        "app-detection": "on",
        "urlcat": "off"
    },
    "ltm profile classification classification_pem": {
        "preset": "/Common/ce_pem",
        "irule-event": "on",
        "app-detection": "on",
        "urlcat": "on"
    },
    "ltm profile classification classification_apm_swg": {
        "preset": "/Common/ce_apm_swg",
        "irule-event": "off",
        "app-detection": "on",
        "urlcat": "off"
    },
    "ltm profile sip sip": {
        "insert-record-route-header": "disabled",
        "insert-via-header": "disabled",
        "max-size": "65535",
        "secure-via-header": "disabled",
        "terminate-on-bye": "enabled"
    },
    "ltm profile statistics stats": {
        "defaults-from": "none",
        "field1": "none",
        "field2": "none",
        "field3": "none",
        "field4": "none",
        "field5": "none",
        "field6": "none",
        "field7": "none",
        "field8": "none",
        "field9": "none",
        "field10": "none",
        "field11": "none",
        "field12": "none",
        "field13": "none",
        "field14": "none",
        "field15": "none",
        "field16": "none",
        "field17": "none",
        "field18": "none",
        "field19": "none",
        "field20": "none",
        "field21": "none",
        "field22": "none",
        "field23": "none",
        "field24": "none",
        "field25": "none",
        "field26": "none",
        "field27": "none",
        "field28": "none",
        "field29": "none",
        "field30": "none",
        "field31": "none",
        "field32": "none"
    },
    "ltm profile stream stream": {
        "source": "none",
        "target": "none"
    },
    "ltm profile pcp pcp": {
        "announce-after-failover": "disabled",
        "announce-multicast": "10",
        "listening-port": "5351",
        "map-filter-limit": "1",
        "map-limit-per-client": "65535",
        "map-recycle-delay": "60",
        "max-mapping-lifetime": "86400",
        "min-mapping-lifetime": "600",
        "multicast-port": "5350",
        "peer-oper-allowed": "disabled",
        "rule": "none",
        "third-party-option": "disabled"
    },
    "ltm profile nat-stats nat-stats": {
        "level": "disabled"
    },
    "ltm profile tcp f5-tcp-progressive": {
        "auto-proxy-buffer-size": "enabled",
        "auto-receive-window-size": "enabled",
        "auto-send-buffer-size": "enabled",
        "congestion-control": "woodside",
        "defaults-from": "/Common/tcp",
        "init-cwnd": "16",
        "init-rwnd": "16",
        "nagle": "auto",
        "proxy-buffer-high": "262144",
        "proxy-buffer-low": "196608",
        "push-flag": "auto",
        "receive-window-size": "131072",
        "send-buffer-size": "262144"
    },
    "ltm profile tcp f5-tcp-wan": {
        "congestion-control": "woodside",
        "defaults-from": "/Common/tcp",
        "delayed-acks": "disabled",
        "minimum-rto": "500",
        "nagle": "auto",
        "proxy-buffer-high": "262144",
        "proxy-buffer-low": "196608",
        "receive-window-size": "131072",
        "send-buffer-size": "262144"
    },
    "ltm profile tcp f5-tcp-lan": {
        "defaults-from": "/Common/tcp",
        "init-cwnd": "16",
        "init-rwnd": "16",
        "minimum-rto": "200",
        "nagle": "auto",
        "proxy-buffer-high": "65535",
        "proxy-buffer-low": "32768",
        "send-buffer-size": "65535"
    },
    "ltm profile tcp f5-tcp-mobile": {
        "congestion-control": "woodside",
        "defaults-from": "/Common/tcp",
        "init-cwnd": "16",
        "nagle": "auto",
        "proxy-buffer-high": "262144",
        "proxy-buffer-low": "196608",
        "receive-window-size": "131072",
        "send-buffer-size": "262144"
    },
    "ltm profile tcp tcp": {
        "abc": "enabled",
        "ack-on-push": "enabled",
        "auto-proxy-buffer-size": "disabled",
        "auto-receive-window-size": "disabled",
        "auto-send-buffer-size": "disabled",
        "close-wait-timeout": "5",
        "cmetrics-cache": "enabled",
        "cmetrics-cache-timeout": "0",
        "congestion-control": "high-speed",
        "deferred-accept": "disabled",
        "delayed-acks": "enabled",
        "delay-window-control": "disabled",
        "dsack": "disabled",
        "early-retransmit": "enabled",
        "ecn": "enabled",
        "enhanced-loss-recovery": "enabled",
        "fast-open": "enabled",
        "fast-open-cookie-expiration": "21600",
        "fin-wait-timeout": "5",
        "fin-wait-2-timeout": "300",
        "idle-timeout": "300",
        "init-cwnd": "10",
        "init-rwnd": "10",
        "ip-tos-to-client": "0",
        "keep-alive-interval": "1800",
        "limited-transmit": "enabled",
        "link-qos-to-client": "0",
        "max-retrans": "8",
        "max-segment-size": "1460",
        "md5-signature": "disabled",
        "minimum-rto": "1000",
        "mptcp": "disabled",
        "nagle": "disabled",
        "pkt-loss-ignore-burst": "0",
        "pkt-loss-ignore-rate": "0",
        "proxy-buffer-high": "65535",
        "proxy-buffer-low": "32768",
        "proxy-mss": "enabled",
        "proxy-options": "disabled",
        "push-flag": "default",
        "rate-pace": "enabled",
        "rate-pace-max-rate": "0",
        "receive-window-size": "65535",
        "reset-on-timeout": "enabled",
        "rexmt-thresh": "3",
        "selective-acks": "enabled",
        "selective-nack": "disabled",
        "send-buffer-size": "131072",
        "slow-start": "enabled",
        "syn-cookie-enable": "enabled",
        "syn-cookie-whitelist": "disabled",
        "syn-max-retrans": "3",
        "syn-rto-base": "3000",
        "tail-loss-probe": "enabled",
        "time-wait-recycle": "enabled",
        "time-wait-timeout": "2000",
        "timestamps": "enabled",
        "verified-accept": "disabled",
        "zero-window-timeout": "20000"
    },
    "ltm profile tcp tcp-legacy": {
        "abc": "enabled",
        "ack-on-push": "enabled",
        "auto-proxy-buffer-size": "disabled",
        "auto-receive-window-size": "disabled",
        "auto-send-buffer-size": "disabled",
        "close-wait-timeout": "5",
        "cmetrics-cache": "enabled",
        "cmetrics-cache-timeout": "0",
        "congestion-control": "high-speed",
        "defaults-from": "/Common/tcp",
        "deferred-accept": "disabled",
        "delayed-acks": "enabled",
        "delay-window-control": "disabled",
        "dsack": "disabled",
        "early-retransmit": "disabled",
        "ecn": "disabled",
        "enhanced-loss-recovery": "disabled",
        "fast-open": "disabled",
        "fast-open-cookie-expiration": "21600",
        "fin-wait-timeout": "5",
        "fin-wait-2-timeout": "300",
        "idle-timeout": "300",
        "init-cwnd": "3",
        "init-rwnd": "3",
        "ip-tos-to-client": "0",
        "keep-alive-interval": "1800",
        "limited-transmit": "enabled",
        "link-qos-to-client": "0",
        "max-retrans": "8",
        "max-segment-size": "1460",
        "md5-signature": "disabled",
        "minimum-rto": "1000",
        "mptcp": "disabled",
        "nagle": "disabled",
        "pkt-loss-ignore-burst": "0",
        "pkt-loss-ignore-rate": "0",
        "proxy-buffer-high": "49152",
        "proxy-buffer-low": "32768",
        "proxy-mss": "enabled",
        "proxy-options": "enabled",
        "rate-pace": "disabled",
        "rate-pace-max-rate": "0",
        "receive-window-size": "65535",
        "reset-on-timeout": "enabled",
        "rexmt-thresh": "3",
        "selective-acks": "enabled",
        "selective-nack": "disabled",
        "send-buffer-size": "65535",
        "slow-start": "enabled",
        "syn-cookie-enable": "enabled",
        "syn-cookie-whitelist": "disabled",
        "syn-max-retrans": "3",
        "syn-rto-base": "3000",
        "tail-loss-probe": "disabled",
        "time-wait-recycle": "enabled",
        "time-wait-timeout": "2000",
        "timestamps": "enabled",
        "verified-accept": "disabled",
        "zero-window-timeout": "20000"
    },
    "ltm profile tcp mptcp-mobile-optimized": {
        "abc": "disabled",
        "congestion-control": "illinois",
        "defaults-from": "/Common/tcp-legacy",
        "delay-window-control": "disabled",
        "delayed-acks": "disabled",
        "dsack": "disabled",
        "ecn": "enabled",
        "init-cwnd": "16",
        "limited-transmit": "enabled",
        "mptcp": "enabled",
        "nagle": "enabled",
        "pkt-loss-ignore-burst": "0",
        "pkt-loss-ignore-rate": "0",
        "proxy-buffer-high": "131072",
        "proxy-buffer-low": "131072",
        "rate-pace": "enabled",
        "receive-window-size": "131072",
        "reset-on-timeout": "disabled",
        "selective-acks": "enabled",
        "send-buffer-size": "262144",
        "slow-start": "enabled",
        "syn-cookie-enable": "disabled",
        "timestamps": "enabled"
    },
    "ltm profile tcp tcp-mobile-optimized": {
        "abc": "disabled",
        "congestion-control": "high-speed",
        "defaults-from": "/Common/tcp-legacy",
        "delay-window-control": "disabled",
        "delayed-acks": "disabled",
        "dsack": "disabled",
        "ecn": "enabled",
        "init-cwnd": "16",
        "limited-transmit": "enabled",
        "nagle": "enabled",
        "pkt-loss-ignore-burst": "0",
        "pkt-loss-ignore-rate": "0",
        "proxy-buffer-high": "131072",
        "proxy-buffer-low": "131072",
        "receive-window-size": "131072",
        "reset-on-timeout": "disabled",
        "selective-acks": "enabled",
        "send-buffer-size": "131072",
        "slow-start": "enabled",
        "timestamps": "enabled"
    },
    "ltm profile tcp tcp-lan-optimized": {
        "ack-on-push": "enabled",
        "defaults-from": "/Common/tcp-legacy",
        "nagle": "disabled",
        "proxy-buffer-high": "131072",
        "proxy-buffer-low": "98304",
        "receive-window-size": "65535",
        "send-buffer-size": "65535",
        "slow-start": "disabled"
    },
    "ltm profile tcp tcp-wan-optimized": {
        "defaults-from": "/Common/tcp-legacy",
        "nagle": "enabled",
        "proxy-buffer-high": "131072",
        "proxy-buffer-low": "131072",
        "receive-window-size": "65535",
        "selective-acks": "enabled",
        "send-buffer-size": "65535"
    },
    "ltm profile tcp wom-tcp-lan-optimized": {
        "cmetrics-cache": "disabled",
        "defaults-from": "/Common/tcp-lan-optimized",
        "delayed-acks": "disabled",
        "idle-timeout": "600",
        "nagle": "enabled",
        "proxy-mss": "enabled",
        "slow-start": "enabled"
    },
    "ltm profile tcp wom-tcp-wan-optimized": {
        "defaults-from": "/Common/tcp-wan-optimized",
        "delayed-acks": "disabled",
        "idle-timeout": "600",
        "nagle": "enabled",
        "proxy-buffer-high": "196608",
        "proxy-buffer-low": "131072",
        "proxy-mss": "enabled",
        "receive-window-size": "458752",
        "selective-nack": "enabled",
        "send-buffer-size": "458752",
        "slow-start": "disabled",
        "zero-window-timeout": "300000",
        "pkt-loss-ignore-burst": "8",
        "pkt-loss-ignore-rate": "10000"
    },
    "ltm profile tcp splitsession-default-tcp": {
        "defaults-from": "/Common/tcp-wan-optimized",
        "delayed-acks": "disabled",
        "idle-timeout": "600",
        "nagle": "enabled",
        "proxy-buffer-high": "196608",
        "proxy-buffer-low": "131072",
        "proxy-mss": "enabled",
        "receive-window-size": "458752",
        "selective-nack": "enabled",
        "send-buffer-size": "458752",
        "slow-start": "disabled",
        "zero-window-timeout": "300000",
        "pkt-loss-ignore-burst": "8",
        "pkt-loss-ignore-rate": "10000"
    },
    "ltm profile dhcpv4 dhcpv4": {
        "idle-timeout": "60",
        "default-lease-time": "86400",
        "transaction-timeout": "30",
        "max-hops": "4",
        "ttl-value": "0"
    },
    "ltm profile dhcpv4 dhcpv4_fwd": {
        "idle-timeout": "60",
        "default-lease-time": "86400",
        "transaction-timeout": "30",
        "max-hops": "4",
        "ttl-value": "0",
        "mode": "forwarding"
    },
    "ltm profile dhcpv6 dhcpv6": {
        "idle-timeout": "60",
        "default-lease-time": "86400",
        "transaction-timeout": "30"
    },
    "ltm profile dhcpv6 dhcpv6_fwd": {
        "idle-timeout": "60",
        "default-lease-time": "86400",
        "transaction-timeout": "30",
        "mode": "forwarding"
    },
    "ltm profile udp udp": {
        "idle-timeout": "60"
    },
    "ltm profile udp udp_preserve_ttl": {
        "idle-timeout": "60",
        "defaults-from": "/Common/udp",
        "ip-ttl-mode": "preserve"
    },
    "ltm profile udp udp_decrement_ttl": {
        "idle-timeout": "60",
        "defaults-from": "/Common/udp",
        "ip-ttl-mode": "decrement"
    },
    "ltm profile udp udp_gtm_dns": {
        "datagram-load-balancing": "enabled",
        "defaults-from": "/Common/udp",
        "idle-timeout": "5"
    },
    "ltm profile ipother ipother": {
        "idle-timeout": "60"
    },
    "ltm profile map-t mapt": {
        "defaults-from": "none",
        "ip6-prefix": "::/48",
        "ip4-prefix": "0.0.0.0/8",
        "ea-bits-length": "32",
        "port-offset": "6",
        "br-prefix": "::/96"
    },
    "ltm profile socks socks": {
        "protocol-versions": [
            "socks4",
            "socks4a",
            "socks5"
        ],
        "default-connect-handling": "deny",
        "ipv6": "no",
        "route-domain": "/Common/0",
        "tunnel-name": "/Common/socks-tunnel"
    },
    "ltm profile web-acceleration optimized-acceleration": {
        "cache-object-max-size": "67108864",
        "cache-object-min-size": "0",
        "cache-size": "6144",
        "defaults-from": "/Common/webacceleration"
    },
    "ltm profile web-acceleration optimized-caching": {
        "cache-max-age": "86400",
        "cache-object-max-size": "2000000",
        "cache-object-min-size": "0",
        "cache-size": "10",
        "defaults-from": "/Common/webacceleration"
    },
    "ltm profile web-acceleration webacceleration": {
        "cache-aging-rate": "9",
        "cache-client-cache-control-mode": "all",
        "cache-insert-age-header": "enabled",
        "cache-max-age": "3600",
        "cache-max-entries": "10000",
        "cache-object-max-size": "50000",
        "cache-object-min-size": "500",
        "cache-size": "100",
        "cache-uri-include": [
            ".*"
        ],
        "cache-uri-include-override": "none",
        "cache-uri-exclude": "none",
        "cache-uri-pinned": "none"
    },
    "ltm profile web-security websecurity": {},
    "ltm profile xml xml": {},
    "ltm profile web-acceleration apm-enduser-if-cache": {
        "cache-max-age": "36000",
        "cache-max-entries": "1000",
        "cache-object-min-size": "5",
        "cache-object-max-size": "12000000",
        "cache-size": "50mb",
        "cache-client-cache-control-mode": "all",
        "cache-uri-include": [
            ".*"
        ],
        "cache-uri-include-override": "none",
        "defaults-from": "/Common/webacceleration"
    },
    "ltm profile tcp apm-forwarding-client-tcp": {
        "ack-on-push": "enabled",
        "close-wait-timeout": "5",
        "defaults-from": "/Common/tcp-legacy",
        "deferred-accept": "disabled",
        "delayed-acks": "enabled",
        "ecn": "disabled",
        "fin-wait-timeout": "5",
        "idle-timeout": "300",
        "keep-alive-interval": "60",
        "limited-transmit": "enabled",
        "max-retrans": "8",
        "nagle": "enabled",
        "receive-window-size": "65535",
        "reset-on-timeout": "enabled",
        "selective-acks": "enabled",
        "send-buffer-size": "131072",
        "slow-start": "disabled",
        "syn-max-retrans": "3",
        "time-wait-recycle": "enabled",
        "time-wait-timeout": "2000",
        "timestamps": "enabled"
    },
    "ltm profile tcp apm-forwarding-server-tcp": {
        "ack-on-push": "enabled",
        "close-wait-timeout": "5",
        "defaults-from": "/Common/tcp-legacy",
        "deferred-accept": "disabled",
        "delayed-acks": "enabled",
        "ecn": "disabled",
        "fin-wait-timeout": "5",
        "idle-timeout": "300",
        "keep-alive-interval": "60",
        "limited-transmit": "enabled",
        "max-retrans": "8",
        "nagle": "enabled",
        "receive-window-size": "65535",
        "reset-on-timeout": "enabled",
        "selective-acks": "enabled",
        "send-buffer-size": "131072",
        "slow-start": "disabled",
        "syn-max-retrans": "3",
        "time-wait-recycle": "enabled",
        "time-wait-timeout": "2000",
        "timestamps": "enabled"
    },
    "ltm profile fastl4 apm-forwarding-fastL4": {
        "idle-timeout": "7200",
        "defaults-from": "/Common/fastL4"
    },
    "ltm profile service /Common/access-logonpage-protection-service": {
        "type": "f5-module"
    },
    "ltm profile connector /Common/access-logonpage-protection-connector": {},
    "sys log-config publisher local-syslog-publisher": {
        "destinations": {
            "/Common/local-syslog": ""
        }
    },
    "security ssh profile ssh": {
        "actions": {
            "default_actions": {
                "shell-action": {
                    "control": "allow",
                    "log": "no"
                }
            }
        }
    },
    "security dos profile dos": {},
    "security bot-defense profile bot-defense": {
        "whitelist": {
            "favicon_1": {
                "match-order": "1",
                "url": "/favicon.ico"
            },
            "apple_touch_1": {
                "match-order": "2",
                "url": "/apple-touch-icon*.png"
            }
        }
    },
    "security bot-defense profile /Common/bot-defense-shape-compatible": {
        "deviceid-mode": "generate-after-access",
        "template": "balanced",
        "anomaly-overrides": {
            "\"/Common/Selenium": "WebDriver\" { action none }",
            "\"/Common/Web": "Rootkit\" { action none }"
        },
        "class-overrides": {
            "\"/Common/Unknown\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Mobile Application\"": {
                "verification": {
                    "action": "none"
                }
            }
        },
        "whitelist": {
            "favicon_1": {
                "match-order": "1",
                "url": "/favicon.ico"
            },
            "apple_touch_1": {
                "match-order": "2",
                "url": "/apple-touch-icon*.png"
            }
        }
    },
    "security bot-defense profile /Common/bot-defense-device-id-generate-before-access": {
        "deviceid-mode": "generate-before-access",
        "perform-challenge-in-transparent": "enabled",
        "dos-attack-strict-mitigation": "disabled",
        "api-access-strict-mitigation": "disabled",
        "class-overrides": {
            "\"/Common/Malicious Bot\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Suspicious Browser\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Trusted Bot\"": {
                "mitigation": {
                    "action": "alarm"
                }
            },
            "\"/Common/Untrusted Bot\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Unknown\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Browser\"": {
                "verification": {
                    "action": "none"
                }
            },
            "\"/Common/Mobile Application\"": {
                "verification": {
                    "action": "none"
                }
            }
        },
        "whitelist": {
            "favicon_1": {
                "match-order": "1",
                "url": "/favicon.ico"
            },
            "apple_touch_1": {
                "match-order": "2",
                "url": "/apple-touch-icon*.png"
            }
        }
    },
    "security bot-defense profile /Common/bot-defense-device-id-generate-after-access": {
        "deviceid-mode": "generate-after-access",
        "perform-challenge-in-transparent": "enabled",
        "dos-attack-strict-mitigation": "disabled",
        "api-access-strict-mitigation": "disabled",
        "class-overrides": {
            "\"/Common/Malicious Bot\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Suspicious Browser\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Trusted Bot\"": {
                "mitigation": {
                    "action": "alarm"
                }
            },
            "\"/Common/Untrusted Bot\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Unknown\"": {
                "mitigation": {
                    "action": "none"
                }
            },
            "\"/Common/Browser\"": {
                "verification": {
                    "action": "none"
                }
            },
            "\"/Common/Mobile Application\"": {
                "verification": {
                    "action": "none"
                }
            }
        },
        "whitelist": {
            "favicon_1": {
                "match-order": "1",
                "url": "/favicon.ico"
            },
            "apple_touch_1": {
                "match-order": "2",
                "url": "/apple-touch-icon*.png"
            }
        }
    },
    "security bot-defense asm-profile bot_defense_asm": {},
    "security bot-defense asm-profile bot_defense_asm_aggregated": {},
    "security http profile http_security": {},
    "security anti-fraud profile antifraud": {
        "blocking-page": {
            "response-body": "\"<html><head><title>User Blocked</title></head><body>Your user account has been blocked. Please contact customer support.</body></html>\"",
            "response-headers": "\"HTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nConnection: close\""
        }
    },
    "security anti-fraud profile /Common/access-logonpage-protection-datasafe": {
        "defaults-from": "/Common/antifraud",
        "description": "\"Access Logon Page protection Datasafe profile\"",
        "app-layer-encryption": {
            "fail-open": "disabled"
        },
        "urls": {
            "/my.policy*": {
                "include-query-string": "enabled",
                "type": "wildcard",
                "login-response": {
                    "status-code": "302",
                    "validation": "enabled"
                },
                "parameters": {
                    "password": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "username": {
                        "identify-as-username": "enabled",
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "_F5_challenge": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "_F5_verify_password": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    }
                }
            },
            "/vdesk/agent_logon_page_form.eui*": {
                "include-query-string": "enabled",
                "priority": "2",
                "type": "wildcard",
                "login-response": {
                    "status-code": "302",
                    "validation": "enabled"
                },
                "parameters": {
                    "_F5_challenge": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "_F5_verify_password": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "password": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "username": {
                        "encrypt": "enabled",
                        "identify-as-username": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    }
                }
            },
            "/subsession_logon_submit.php3*": {
                "include-query-string": "enabled",
                "priority": "3",
                "type": "wildcard",
                "login-response": {
                    "status-code": "302",
                    "validation": "enabled"
                },
                "parameters": {
                    "_F5_challenge": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "_F5_verify_password": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "password": {
                        "encrypt": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    },
                    "username": {
                        "encrypt": "enabled",
                        "identify-as-username": "enabled",
                        "obfuscate": "enabled",
                        "substitute-value": "enabled"
                    }
                }
            }
        }
    },
    "security datasync local-profile crypt-asm-dosl7": {
        "buf-size": "10240",
        "ds-area": "asm",
        "gen-pause-sec": "0",
        "gen-timeout-sec": "0",
        "keep-conf-files": "0",
        "min-cpu-percent": "0",
        "max-gen-rows": "infinite",
        "min-mem-mb": "0",
        "offline-until-gen": "enabled",
        "rows-bulk": "1",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile crypt-fpm": {
        "buf-size": "10240",
        "ds-area": "fps",
        "gen-pause-sec": "0",
        "gen-timeout-sec": "0",
        "keep-conf-files": "0",
        "min-cpu-percent": "0",
        "max-gen-rows": "infinite",
        "min-mem-mb": "0",
        "offline-until-gen": "enabled",
        "rows-bulk": "1",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile cs-asm-dosl7": {
        "buf-size": "9437184",
        "ds-area": "asm",
        "gen-pause-sec": "10",
        "gen-timeout-sec": "1800",
        "keep-conf-files": "1000",
        "min-cpu-percent": "20",
        "max-gen-rows": "infinite",
        "min-mem-mb": "100",
        "offline-until-gen": "enabled",
        "rows-bulk": "5",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile cs-fpm": {
        "buf-size": "16777216",
        "ds-area": "fps",
        "gen-pause-sec": "10",
        "gen-timeout-sec": "1800",
        "keep-conf-files": "1000",
        "min-cpu-percent": "20",
        "max-gen-rows": "infinite",
        "min-mem-mb": "100",
        "offline-until-gen": "enabled",
        "rows-bulk": "10",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile static-fpm": {
        "buf-size": "204800",
        "ds-area": "fps",
        "gen-pause-sec": "0",
        "gen-timeout-sec": "0",
        "keep-conf-files": "0",
        "min-cpu-percent": "0",
        "max-gen-rows": "infinite",
        "min-mem-mb": "0",
        "offline-until-gen": "enabled",
        "rows-bulk": "1",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile rsa": {
        "buf-size": "2097152",
        "ds-area": "fps",
        "gen-pause-sec": "10",
        "gen-timeout-sec": "1800",
        "keep-conf-files": "0",
        "min-cpu-percent": "20",
        "max-gen-rows": "infinite",
        "min-mem-mb": "50",
        "offline-until-gen": "enabled",
        "rows-bulk": "50",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile captcha": {
        "buf-size": "5242880",
        "ds-area": "asm",
        "gen-pause-sec": "0",
        "gen-timeout-sec": "1800",
        "keep-conf-files": "0",
        "min-cpu-percent": "10",
        "max-gen-rows": "infinite",
        "min-mem-mb": "50",
        "offline-until-gen": "enabled",
        "rows-bulk": "4",
        "max-iowait-percent": "15"
    },
    "security datasync local-profile cs-perm-fpm": {
        "buf-size": "1048576",
        "ds-area": "fps",
        "gen-pause-sec": "10",
        "gen-timeout-sec": "1800",
        "keep-conf-files": "1000",
        "min-cpu-percent": "20",
        "max-gen-rows": "infinite",
        "min-mem-mb": "100",
        "offline-until-gen": "enabled",
        "rows-bulk": "10",
        "max-iowait-percent": "15"
    },
    "ltm persistence cookie cookie": {
        "cookie-name": "none",
        "expiration": "0",
        "hash-length": "0",
        "hash-offset": "0",
        "method": "insert",
        "mirror": "disabled"
    },
    "ltm persistence dest-addr dest_addr": {
        "mask": "none",
        "mirror": "disabled",
        "timeout": "180"
    },
    "ltm persistence hash hash": {
        "mirror": "disabled",
        "rule": "none",
        "timeout": "180"
    },
    "ltm persistence host host": {
        "mirror": "disabled",
        "timeout": "180"
    },
    "ltm persistence msrdp msrdp": {
        "has-session-dir": "yes",
        "mirror": "disabled",
        "timeout": "300"
    },
    "ltm persistence sip sip_info": {
        "mirror": "disabled",
        "timeout": "180"
    },
    "ltm persistence source-addr source_addr": {
        "map-proxies": "enabled",
        "mask": "none",
        "mirror": "disabled",
        "timeout": "180"
    },
    "ltm persistence ssl ssl": {
        "mirror": "disabled",
        "timeout": "300"
    },
    "ltm persistence universal universal": {
        "mirror": "disabled",
        "rule": "none",
        "timeout": "180"
    },
    "ltm auth profile krbdelegate": {
        "configuration": "none",
        "cookie-key": "abc123",
        "cookie-name": "f5auth",
        "credential-source": "http-basic-auth",
        "defaults-from": "none",
        "enabled": "yes",
        "type": "krbdelegate"
    },
    "ltm auth profile ldap": {
        "configuration": "none",
        "credential-source": "http-basic-auth",
        "defaults-from": "none",
        "enabled": "yes",
        "rule": "/Common/_sys_auth_ldap",
        "type": "ldap"
    },
    "ltm auth profile radius": {
        "configuration": "none",
        "credential-source": "http-basic-auth",
        "defaults-from": "none",
        "enabled": "yes",
        "rule": "/Common/_sys_auth_radius",
        "type": "radius"
    },
    "ltm auth profile ssl_cc_ldap": {
        "configuration": "none",
        "defaults-from": "none",
        "enabled": "yes",
        "rule": "/Common/_sys_auth_ssl_cc_ldap",
        "type": "ssl-cc-ldap"
    },
    "ltm auth profile ssl_crldp": {
        "configuration": "none",
        "defaults-from": "none",
        "enabled": "yes",
        "rule": "/Common/_sys_auth_ssl_crldp",
        "type": "ssl-crldp"
    },
    "ltm auth profile ssl_ocsp": {
        "configuration": "none",
        "defaults-from": "none",
        "enabled": "yes",
        "rule": "/Common/_sys_auth_ssl_ocsp",
        "type": "ssl-ocsp"
    },
    "ltm auth profile tacacs": {
        "configuration": "none",
        "credential-source": "http-basic-auth",
        "defaults-from": "none",
        "enabled": "yes",
        "rule": "/Common/_sys_auth_tacacs",
        "type": "tacacs"
    },
    "ltm data-group internal aol": {
        "records": {
            "64.12.96.0/19": {},
            "195.93.16.0/20": {},
            "195.93.48.0/22": {},
            "195.93.64.0/19": {},
            "195.93.96.0/19": {},
            "198.81.0.0/22": {},
            "198.81.8.0/23": {},
            "198.81.16.0/20": {},
            "202.67.65.128/25": {},
            "205.188.112.0/20": {},
            "205.188.146.144/30": {},
            "205.188.192.0/20": {},
            "205.188.208.0/23": {},
            "207.200.112.0/21": {}
        },
        "type": "ip"
    },
    "ltm data-group internal images": {
        "records": {
            ".bmp": {},
            ".gif": {},
            ".jpg": {}
        },
        "type": "string"
    },
    "ltm data-group internal private_net": {
        "records": {
            "10.0.0.0/8": {},
            "172.16.0.0/12": {},
            "192.168.0.0/16": {}
        },
        "type": "ip"
    },
    "ltm data-group internal sys_APM_MS_Office_OFBA_DG": {
        "description": "\"This internal data-group is used in _sys_APM_MS_Office_OFBA_Support irule\"",
        "records": {
            "ie_sp_session_sharing_enabled": {
                "data": "0"
            },
            "ie_sp_session_sharing_inactivity_timeout": {
                "data": "60"
            },
            "ofba_auth_dialog_size": {
                "data": "800x600"
            },
            "useragent1": {
                "data": "\"microsoft data access internet publishing provider\""
            },
            "useragent2": {
                "data": "\"office protocol discovery\""
            },
            "useragent3": {
                "data": "\"microsoft office\""
            },
            "useragent4": {
                "data": "non-browser"
            },
            "useragent5": {
                "data": "\"msoffice 12\""
            },
            "useragent6": {
                "data": "microsoft-webdav-miniredir"
            },
            "useragent7": {
                "data": "webdav-miniredir"
            },
            "useragent9": {
                "data": "\"ms frontpage 1[23456789]\""
            },
            "useragent10": {
                "data": "onenote"
            }
        },
        "type": "string"
    },
    "ltm alg-log-profile alg_log_profile": {
        "end-control-channel": {
            "action": "enabled"
        },
        "end-data-channel": {
            "action": "enabled"
        },
        "inbound-transaction": {
            "action": "enabled"
        }
    },
    "ltm lsn-log-profile lsn_log_profile": {
        "end-outbound-session": {
            "action": "enabled"
        },
        "end-inbound-session": {
            "action": "enabled"
        },
        "quota-exceeded": {
            "action": "enabled"
        },
        "errors": {
            "action": "enabled"
        }
    },
    "ltm rule /Common/_sys_auth_ldap": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        if {not [info exists tmm_auth_http_sids(ldap)]} {\n            set tmm_auth_sid [AUTH::start pam default_ldap]\n            set tmm_auth_http_sids(ldap) $tmm_auth_sid\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_sid\n            }\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(ldap)\n        }\n        AUTH::username_credential $tmm_auth_sid [HTTP::username]\n        AUTH::password_credential $tmm_auth_sid [HTTP::password]\n        AUTH::authenticate $tmm_auth_sid\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(ldap)] or \\\n           ($tmm_auth_http_sids(ldap) != [AUTH::last_event_session_id]) or \\\n           (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"ldap\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n                }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if {[AUTH::status] == 0} {\n                HTTP::release\n            } else {\n                HTTP::respond 401\n            }\n        }\n    }\ndefinition-signature ivtbsTt8rheTfPgwLBGpP81b8OdTgGGm1ZBOfZfAvzuT9By32DafRf/n0g7oLZl9yGrqmwcuHmcRsRgAbrvZBlDebWJSRjd2DQoYg2T2+jli0qGy6eNJC8Aw3Du/ldfRxk9vgNKisz5m7SrObMJhp59YVORC6gZMGcvwzRAeI5a1MtNoWFjMIeYULeRQMs+ut/0QKpaCDhQXGyM9Nf9iSaP5V9FdlaT+1X4zCeu0kCAKdxD+5fy2QhR/1B6Yne4lqHLkbIhN22MN9dfPryFGxtW+HryW+hLydl3jLJgfdRltlII9RC/7sNBrrw+1G+pimKbExFUhKlgv3S+AfPyYZA==",
    "ltm rule _sys_auth_radius": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        if {not [info exists tmm_auth_http_sids(radius)]} {\n            set tmm_auth_sid [AUTH::start pam default_radius]\n            set tmm_auth_http_sids(radius) $tmm_auth_sid\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_sid\n            }\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(radius)\n        }\n        AUTH::username_credential $tmm_auth_sid [HTTP::username]\n        AUTH::password_credential $tmm_auth_sid [HTTP::password]\n        AUTH::authenticate $tmm_auth_sid\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(radius)] or \\\n            ($tmm_auth_http_sids(radius) != [AUTH::last_event_session_id]) or \\\n            (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"radius\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n                }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if { [AUTH::status] == 0 } {\n                HTTP::release\n            } else {\n                HTTP::respond 401\n            }\n        }\n    }\ndefinition-signature IKEOxzIt+/olVVs5ljd6RYYXcLSSPbTHc/N2BSC5FFeNI8xe4T3VpkirN4jkyQOnnySD6JSeDWEekzuatxv2Zj6u0pDBkTk7glhkWQ1qn9qqgSlySyX3vs1t/YA2QvzgW2mnOAwhNebTrGdAz+Rvl0uJlOtH6hiwkqj6AGTU9FtoMfGkxbkjRptdxVcScOs7xtcwN85W+kuP1giU+yslMpF/b5PGJLDua0cnp2UWMVkRF+bJ1WlTluBcd27YIPhZtBkYUZknRYiyZ1mo3+eUI11blhz7mI8XiiAPcL1sVpirCF1PROkD5MrtVKqMdjG2d/CCc5XMVCUF8Wu2CEkThg==",
    "ltm rule _sys_auth_ssl_cc_ldap": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when CLIENT_ACCEPTED {\n        set tmm_auth_ssl_cc_ldap_sid 0\n        set tmm_auth_ssl_cc_ldap_done 0\n    }\n    when CLIENTSSL_CLIENTCERT {\n        if {[SSL::cert count] == 0} {\n            return\n        }\n        set tmm_auth_ssl_cc_ldap_done 0\n        if {$tmm_auth_ssl_cc_ldap_sid == 0} {\n            set tmm_auth_ssl_cc_ldap_sid [AUTH::start pam default_ssl_cc_ldap]\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_ssl_cc_ldap_sid\n            }\n        }\n        AUTH::cert_credential $tmm_auth_ssl_cc_ldap_sid [SSL::cert 0]\n        AUTH::authenticate $tmm_auth_ssl_cc_ldap_sid\n        SSL::handshake hold\n    }\n    when CLIENTSSL_HANDSHAKE {\n        set tmm_auth_ssl_cc_ldap_done 1\n    }\n    when AUTH_RESULT {\n        if {[info exists tmm_auth_ssl_cc_ldap_sid] and \\\n            ($tmm_auth_ssl_cc_ldap_sid == [AUTH::last_event_session_id])} {\n            set tmm_auth_status [AUTH::status]\n            if {$tmm_auth_status == 0} {\n                set tmm_auth_ssl_cc_ldap_done 1\n                SSL::handshake resume\n            } elseif {$tmm_auth_status != -1 || $tmm_auth_ssl_cc_ldap_done == 0} {\n                reject\n            }\n        }\n    }\ndefinition-signature LtRGyLVLmGrOazlR7X/5LJB/TttBDo9XlFr5ATtyQ0jObANtTQ+TFigApDvtqpXZ3vOx9tTbCQ8SUnr9e1AT9Itvat+lanwUcJsYknKCT8/5qVLojcL7gkdONMk4H5gjhsRf6RlfJO2oPSEyYY8MgP4b5m/jj3PuSPzS8H5V0PXYOuxMyJD2dQyhxRNR6huMNYyHE+xX6Gp7QT5Wj2RnDTT84QiPJAOoA8AGQdS2DZYzItkQcynEUD3aNI8zufBoMfRmN+nbiK6CVg8odr49wLCwGOZYQ9EzqJLAcjkQx51ot4KhzaY1Iz2DMZaM52fp/J55U2fYBlLLgWszfY+phg==",
    "ltm rule _sys_auth_ssl_ocsp": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when CLIENT_ACCEPTED {\n        set tmm_auth_ssl_ocsp_sid 0\n        set tmm_auth_ssl_ocsp_done 0\n    }\n    when CLIENTSSL_CLIENTCERT {\n        if {[SSL::cert count] == 0} {\n            return\n        }\n        if {[SSL::verify_result] != 0} {\n            return\n        }\n        set tmm_auth_ssl_ocsp_done 0\n        if {$tmm_auth_ssl_ocsp_sid == 0} {\n            set tmm_auth_ssl_ocsp_sid [AUTH::start pam default_ssl_ocsp]\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_ssl_ocsp_sid\n            }\n        }\n        AUTH::cert_credential $tmm_auth_ssl_ocsp_sid [SSL::cert 0]\n        AUTH::cert_issuer_credential $tmm_auth_ssl_ocsp_sid [SSL::cert issuer 0]\n        AUTH::authenticate $tmm_auth_ssl_ocsp_sid\n        SSL::handshake hold\n    }\n    when CLIENTSSL_HANDSHAKE {\n        set tmm_auth_ssl_ocsp_done 1\n    }\n    when AUTH_RESULT {\n        if {[info exists tmm_auth_ssl_ocsp_sid] and \\\n            ($tmm_auth_ssl_ocsp_sid == [AUTH::last_event_session_id])} {\n            set tmm_auth_status [AUTH::status]\n            if {$tmm_auth_status == 0} {\n                set tmm_auth_ssl_ocsp_done 1\n                SSL::handshake resume\n            } elseif {$tmm_auth_status != -1 || $tmm_auth_ssl_ocsp_done == 0} {\n                reject\n            }\n        }\n    }\ndefinition-signature Oh5q705dyFq3rfV2lDS8dJrRbF/lJlMizOQYAidLVK2OQoOTaWFKl+8UHCRNNqmprz9CZpVHtxKctt40iM5u21F3vy57hCxaRgKZ7IhoQHmFILekQL9RnTVeMJg5m+e7es7h2dCBEIDPHY/+EBFv/YB4s+AEAED+HiNgXtbEKAcbKDvjDE9caeSWe0UbCokMks5V08cNPE88FSu+YjouNf5TkH4tpBXZiiLW6uEX5MS9hayA89JZmg7udLIxJBBCPD5ZIiG+gC7kvbi+xE9oPEffQ3sEDyEhxBZoOIL7HK5oEg0ENOY8HqgDXiCbvOp4daa/aBihMQBjWmjxdRh4tg==",
    "ltm rule _sys_auth_ssl_crldp": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when CLIENT_ACCEPTED {\n        set tmm_auth_ssl_crldp_sid 0\n        set tmm_auth_ssl_crldp_done 0\n    }\n    when CLIENTSSL_CLIENTCERT {\n        if {[SSL::cert count] == 0} {\n            return\n        }\n        set tmm_auth_ssl_crldp_done 0\n        if {$tmm_auth_ssl_crldp_sid == 0} {\n            set tmm_auth_ssl_crldp_sid [AUTH::start pam default_ssl_crldp]\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_ssl_crldp_sid\n            }\n        }\n        AUTH::cert_credential $tmm_auth_ssl_crldp_sid [SSL::cert 0]\n        AUTH::cert_issuer_credential $tmm_auth_ssl_crldp_sid [SSL::cert issuer 0]\n        AUTH::authenticate $tmm_auth_ssl_crldp_sid\n        SSL::handshake hold\n    }\n    when CLIENTSSL_HANDSHAKE {\n        set tmm_auth_ssl_crldp_done 1\n    }\n    when AUTH_RESULT {\n        if {[info exists tmm_auth_ssl_crldp_sid] and \\\n            ($tmm_auth_ssl_crldp_sid == [AUTH::last_event_session_id])} {\n            set tmm_auth_status [AUTH::status]\n            if {$tmm_auth_status == 0} {\n                set tmm_auth_ssl_crldp_done 1\n                SSL::handshake resume\n            } elseif {$tmm_auth_status != -1 || $tmm_auth_ssl_crldp_done == 0} {\n                reject\n            }\n        }\n    }\ndefinition-signature BH/sgHzgcQin7sshuTFXGbdDJFWrfeTKnk1QJMLaKsvs9ip21N5FBbMkKXsR9EeIEMlHJOnfc6sWBDFEA7OqfgqBfVPfOBJdJI9SO+eES7DGpHgkI3Bx3nRJLx/BIkCE2zrw/nWON/bx5SRVxySkw5A498OWMygc4jpZzpi3EqskO4E0zb3LXlcG67D994JJ79aVuwrADm4YIErt+nfITSUWMa6/loBIAS5/kAx0Qn77SaHs9xIyVD4gQ5cjL8xtztWSCi5h3sRf8tB24UZlSLX2zMp+XqpiZ1gAUDFHxA+VZxO68w47OEt+7tkB9XYHxe4c2ICUr0lOx3CL2TcILQ==",
    "ltm rule _sys_auth_tacacs": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        if {not [info exists tmm_auth_http_sids(tacacs)]} {\n            set tmm_auth_sid [AUTH::start pam default_tacacs]\n            set tmm_auth_http_sids(tacacs) $tmm_auth_sid\n            if {[info exists tmm_auth_subscription]} {\n                AUTH::subscribe $tmm_auth_sid\n            }\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(tacacs)\n        }\n        AUTH::username_credential $tmm_auth_sid [HTTP::username]\n        AUTH::password_credential $tmm_auth_sid [HTTP::password]\n        AUTH::authenticate $tmm_auth_sid\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(tacacs)] or \\\n            ($tmm_auth_http_sids(tacacs) != [AUTH::last_event_session_id]) or \\\n            (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"tacacs\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n                }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if { [AUTH::status] == 0 } {\n                HTTP::release\n            } else {\n                HTTP::respond 401\n            }\n        }\n    }\ndefinition-signature Uq7dIMC0Aws84ull+0BeivuhFi+Va6Sy0gb5wEE2cygYJ8hh9mszXphWSNH8DuMv9TrpORcWJtf+iFYq2M9SmqA9Ld8vWd3Fp3WprEYPqTz92+78kjUbB3arZ4v7o94gHY4YD6DmKl99uYrIWTobWvLyq+VCk6CE7brpz3BJRgAO1+ISN01G0qWBMoDgSy02xkc1yEc2DroFjQd/K54S2jMPrQf1RrJx2iQysNoC7go0qQy+DseLeNovqUE/KOnb6Gzhma77om0kUWte/luEQ4Lb13+7vZjLlemoMPlSFdwYWHWELi775OiulQEcfbY0BQCIkCYH+2JRe2iiBVmAOQ==",
    "ltm rule _sys_auth_krbdelegate": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n        set thecert \"\"\n        set ckname F5KRBAUTH\n        set ckpass abc123\n        set authprofiles [PROFILE::list auth]\n        # Search the auth profiles for the krbdelegate(7) and grab cookie info\n        foreach profname $authprofiles {\n            if { [PROFILE::auth $profname type] == 7 } {\n                set tmpckname [PROFILE::auth $profname cookie_name]\n                set tmpckpass [PROFILE::auth $profname cookie_key]\n                if {[PROFILE::auth $profname cookie_name] != \"\" } {\n                    set ckname $tmpckname\n                    set ckpass $tmpckpass\n                    break\n                }\n            }\n        }\n        set seecookie 0\n        set insertcookie 0\n        # check for the cookie\n        if {not [info exists tmm_auth_http_sids(krbdelegate)]} {\n            set tmm_auth_sid [AUTH::start pam default_krbdelegate]\n            set tmm_auth_http_sids(krbdelegate) $tmm_auth_sid\n            AUTH::subscribe $tmm_auth_sid\n        } else {\n            set tmm_auth_sid $tmm_auth_http_sids(krbdelegate)\n        }\n        if { [PROFILE::exists clientssl] } {\n            set certcmd \"SSL::cert 0\"\n            set thecert [ eval $certcmd ]\n        }\n        if { $thecert == \"\" } {\n            # if no cert, assume old kerb delegation\n            # if there is no Authorization header and no cookie, get one.\n            if { ([HTTP::header Authorization] == \"\") and\n                  (not [HTTP::cookie exists $ckname])} {\n                HTTP::respond 401 WWW-Authenticate Negotiate\n                return\n            }\n        }\n        if {[HTTP::cookie exists $ckname]} {\n            set ckval [HTTP::cookie decrypt $ckname $ckpass]\n            AUTH::username_credential $tmm_auth_sid \"cookie\"\n            AUTH::password_credential $tmm_auth_sid $ckval\n            set seecookie 1\n        } else {\n            if { $thecert == \"\" } {\n                # Kerberos Delegation - set username\n                # Strip off the Negotiate before the base64d goodness\n                AUTH::username_credential $tmm_auth_sid [lindex [HTTP::header Authorization] 1]\n            }\n            else {\n                # Protocol Transition - set ttm_auth_sid\n                AUTH::username_credential $tmm_auth_sid \"krpprottran\"\n                AUTH::cert_credential $tmm_auth_sid $thecert\n            }\n            AUTH::password_credential $tmm_auth_sid \"xxxx\"\n        }\n        AUTH::authenticate $tmm_auth_sid\n        if {not [info exists tmm_auth_http_collect_count]} {\n            HTTP::collect\n            set tmm_auth_http_successes 0\n            set tmm_auth_http_collect_count 1\n        } else {\n            incr tmm_auth_http_collect_count\n        }\n    }\n    when AUTH_RESULT {\n        if {not [info exists tmm_auth_http_sids(krbdelegate)] or \\\n            ($tmm_auth_http_sids(krbdelegate) != [AUTH::last_event_session_id]) or \\\n            (not [info exists tmm_auth_http_collect_count])} {\n            return\n        }\n        if {[AUTH::status] == 0} {\n            incr tmm_auth_http_successes\n        }\n        # If multiple auth sessions are pending and\n        # one failure results in termination and this is a failure\n        # or enough successes have now occurred\n        if {([array size tmm_auth_http_sids] > 1) and \\\n            ((not [info exists tmm_auth_http_sufficient_successes] or \\\n             ($tmm_auth_http_successes >= $tmm_auth_http_sufficient_successes)))} {\n            # Abort the other auth sessions\n            foreach {type sid} [array get tmm_auth_http_sids] {\n                unset tmm_auth_http_sids($type)\n                if {($type ne \"krbdelegate\") and ($sid != -1)} {\n                    AUTH::abort $sid\n                    incr tmm_auth_http_collect_count -1\n               }\n            }\n        }\n        # If this is the last outstanding auth then either\n        # release or respond to this session\n        incr tmm_auth_http_collect_count -1\n        if {$tmm_auth_http_collect_count == 0} {\n            unset tmm_auth_http_collect_count\n            if { [AUTH::status] == 0 } {\n                array set pamout [AUTH::response_data]\n                HTTP::header replace Authorization \"Negotiate $pamout(krbdelegate:attr:SPNEGO)\"\n                if {$seecookie == 0} {\n                    set insertcookie $pamout(krbdelegate:attr:KRB5CCNAME)\n                }\n                HTTP::release\n            } else {\n                HTTP::respond 401 WWW-Authenticate Negotiate \"Set-Cookie\" \"$ckname= ; expires=Wed Dec 31 16:00:00 1969\"\n            }\n        }\n    }\n    # When the response goes out, if we need to insert a cookie, do it.\n    when HTTP_RESPONSE {\n        if {$insertcookie != 0} {\n            HTTP::cookie insert name $ckname value $insertcookie\n            HTTP::cookie encrypt $ckname $ckpass\n        }\n    }\ndefinition-signature ax5Zk9GEaYsygCFJ/c4SVC/p2nhi9tPNyXKogSH/i+o42+wUmNzts0fiOT0u3zK2PqPEpYtBRzpc84CF6cz8fHYjOrjVuKt/ccWhVIqvSey4sGWV5pYlOWbETi2tFImnxPUn6q9esTmlfXMjuflsx3mJXzw35zEvBhaGMmZ853RVmANRpqP+NJUwFJjrb6rJ+ptlfKMTZPt32/ZRoSXubiWHDZ36eH7bpyisXp/jZiVt/kvhEYDITuFT9BzlTRC+1oiUKvEfxfBvl7f+1d+uORDdPnv2UeUrFWspmVw1THCPCyRfPQvbZaL+FmYh5I9XO0ODhBznKrtdwrLeBuDIuQ==",
    "ltm rule _sys_https_redirect": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when HTTP_REQUEST {\n       HTTP::redirect https://[getfield [HTTP::host] \":\" 1][HTTP::uri]\n    }\ndefinition-signature tJY87UPbfpgQ3TPXqXhbCAgqIJhR1MvyFxXLTX/wNqmH+XV51tNkr8HWmv4PBq8hm6w7peLKj88shG+0RiX+yAMU31n6jS9vRcg0VKNPBWLTzu3Ic8abqyyY6XYgkMel+d9Sa8x+vakcuPcAZ0dnICHQiQFePjxYUD0XKwIrbGqQb8vEcU3HHbDaLoMQry4KDnV3s1crFpWXBZBo6esIdzM/s0jYncqZBNdTmIEH3ujEunmo2Jh9MBDhwfGKy1XwCfeeZvzk8b1J+HbRk7W/vbrRUewJZDt+Z13i9u/MbneAL4QXZgtjSxU2nN4GcZjWePUIm7oxc1nz9FGeNva1xg==",
    "ltm rule _sys_APM_activesync": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when RULE_INIT {\n        set static::actsync_401_http_body   \"<html><title>Authentication Failed</title><body>Error: Authentication Failure</body></html>\"\n        set static::actsync_503_http_body   \"<html><title>Service is not available</title><body>Error: Service is not available</body></html>\"\n        set static::ACCESS_LOG_PREFIX       \"01490000:7:\"\n    }\n    when HTTP_REQUEST {\n        set http_path                       [string tolower [HTTP::path]]\n        set f_clientless_mode               0\n        if { $http_path == \"/microsoft-server-activesync\" } {\n        }\n        elseif { $http_path == \"/autodiscover/autodiscover.xml\" } {\n            set f_auto_discover 1\n        }\n        else return\n        if { ! [ info exists src_ip ] } {\n            set src_ip                            [IP::remote_addr]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP  \t  1\n        }\n        # Only allow HTTP Basic Authentication.\n        set auth_info_b64enc                \"\"\n        set http_hdr_auth                   [HTTP::header Authorization]\n        regexp -nocase {Basic (.*)} $http_hdr_auth match auth_info_b64enc\n        if { $auth_info_b64enc == \"\" } {\n            set http_hdr_auth \"\"\n        }\n        if { $http_hdr_auth == \"\" } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Empty/invalid HTTP Basic Authorization header\"\n            HTTP::respond 401 content $static::actsync_401_http_body Connection close\n            return\n        }\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        # Do we have valid MRHSession cookie.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n                # Default profile access setting is false\n                if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                    return\n                }\n                elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched\"\n                    return\n                }\n                else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                }\n            }\n            else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n            }\n            set MRHSession_cookie \"\"\n            HTTP::cookie remove MRHSession\n        }\n        set apm_username                    [ string tolower [HTTP::username] ]\n        set apm_password                    [HTTP::password]\n        if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n            binary scan [md5 \"$apm_password$\"] H* user_hash\n        } else {\n            binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n        }\n        set user_key {}\n        append user_key $apm_username \".\" $user_hash\n        unset user_hash\n        set f_insert_clientless_mode    0\n        set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n        if { [ llength $apm_cookie_list ] != 0 } {\n            set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n            if { $apm_cookie != \"\" } {\n                HTTP::cookie insert name MRHSession value $apm_cookie\n            } else {\n                set f_insert_clientless_mode 1\n            }\n        } else {\n            set f_insert_clientless_mode 1\n        }\n        if { $f_insert_clientless_mode == 1 } {\n            HTTP::header insert \"clientless-mode\" 1\n            HTTP::header insert \"username\" $apm_username\n            HTTP::header insert \"password\" $apm_password\n        }\n        unset f_insert_clientless_mode\n    }\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n            ACCESS::session data set \"session.user.activesync\" 1\n            if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n                set f_auto_discover 0\n                ACCESS::session data set \"session.user.microsoft-autodiscover\" 1\n            }\n        }\n    }\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n        set policy_result [ACCESS::policy result]\n        switch $policy_result {\n        \"allow\" {\n        }\n        \"deny\" {\n            ACCESS::respond 401 content $static::actsync_401_http_body Connection close\n            ACCESS::session remove\n        }\n        default {\n            ACCESS::respond 503 content $static::actsync_503_http_body Connection close\n            ACCESS::session remove\n        }\n        }\n        unset user_key\n    }\ndefinition-signature spIagrH9Xn9IG7rs4q4r0/ANUUJrvYo0d1Gh+2LLA20m7qM6EdVUofs5/pnJYV9OG9t9qkM3531vwT+IdBOX/N2aOPfMnhE4o5qKlMjecBSdLSUikVrWNjxM9kxJgPFTD3CjO2xPbkfghm067JvFCiJh4wcT+zeT2iru/ri8NSRrS+vOYlR4oAFO60N+bXNGB6Z4lLcYYg+lD2+wiZz2I57XuMXmRWANOcK1/HEoM2XPATB8kFZqtZJT5YDodibKmt677sD+HjtzsmgjtxeSNE41urVdZHLvHh9f8KOZjF+Qhl9AZrUgTKaDp8K6QH3BC5nLU/ByrPHD/2tI8z7abA==",
    "ltm rule _sys_APM_ExchangeSupport_helper": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    # The purpose of this iRule is for help the main virtual for the timing of the HTTP request retry\n    # during the SSO process for OutlookAnywhere protocol request which has a Content-Length value of 1GB.\n    when HTTP_REQUEST {\n        #  Waiting for the first chunk of data.\n        HTTP::collect 1\n    }\n    when HTTP_REQUEST_DATA {\n        # Respond 401 and close the connection once we received the data.\n        HTTP::respond 401 WWW-Authenticate NTLM Connection close\n    }\ndefinition-signature nR01gptC7P7Tejd6mkHebwHVheXTs9v1yM1Ne0A26dTNbUAu5a/Hw3qngZnmPaHBvPMBMgb1+qm0jogFZ7c2P93pPTfxRWWlpzHJfVhkhxLkCeaqvlKECt9Q0xihCZFu+fTivkNwnqdKTq0HKpnXWv3Z+l0nq5UqOtDNnSJ4qu2ZKGEoBfL7wtc+kOEgQLBSdoYgn8ed2QpScVOuwJjK0HlS6MxLxOBZaHx0Yi7xfmU/G+CDOMD4pCUN9noS8uB+BWHG2Irj7EKdxZUgUlGlVDICKpkr+JHzCPDZ0uTqHU0PmzbIgefKSzS2GR4DkgaeVb3TTwXne/tYfWDIOrvxiw==",
    "ltm rule _sys_APM_ExchangeSupport_main": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    # Global variables\n    # static::POLICY_RESULT_CACHE_AUTHFAILED\n    #     Administrator can set this into 1, when there is a necessity to cache failed policy result.\n    #     This may be needed to avoid account locked caused by the Active Sync device when it uses wrong passwords.\n    #     One possible scenario, is that when the user changes the password in Active Directory, but missed to changed in their devices.\n    # Responses\n    # On denied result\n    #     Administrator can customize the responses to the device depends on more complex conditions when necessary.\n    #     In those cases, please use ACCESS::respond command.\n    #     The following is the syntax of ACCESS::respond\n    #     ACCESS::respond <status code> [ content <body> ] [ <Additional Header> <Additional Header value>* ]\n    #     e.g. ACCESS::respond 401 content \"Error: Denied\" WWW-Authenticate \"basic realm=\\\"f5.com\\\"\" Connection close\n    when RULE_INIT {\n        # Please set the following global variables for customized responses.\n        set static::actsync_401_http_body \"<html><title>Authentication Failured</title><body>Error: Authentication Failure</body></html>\"\n        set static::actsync_503_http_body \"<html><title>Service is not available</title><body>Error: Service is not available</body></html>\"\n        set static::ACCESS_LOG_PREFIX                 \"01490000:7:\"\n        # Second Virtual Server name for 401 NTLM responder\n        set static::ACCESS_SECOND_VIRTUAL_NAME        \"_ACCESS_401_NTLM_responder_HTTPS\"\n        set static::POLICY_INPROGRESS                 \"policy_inprogress\"\n        set static::POLICY_AUTHFAILED                 \"policy_authfailed\"\n        # The request with huge content length can not be used for starting ACCESS session.\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session. The following value is used for Outlook Anywhere.\n        set static::OA_MAGIC_CONTENT_LEN              1073741824\n        # Similar with OutlookAnywhere case, ACCESS can not use the request which is\n        # larger then following size. This becomes an issue with application that using\n        # Exchange Web Service as its main protocol such as Mac OS X applications\n        # (e.g. Mail app, Microsoft Entourage, etc)\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session.\n        set static::FIRST_BIG_POST_CONTENT_LEN        640000\n        # Set it into 1 if the backend EWS handler accepts HTTP Basic Authentication.\n        set static::EWS_BKEND_BASIC_AUTH              0\n        # Set it into 1 if the backend RPC-over-HTTP handler accepts HTTP Basic Authentication.\n        set static::RPC_OVER_HTTP_BKEND_BASIC_AUTH    0\n        # The following variable controls the polling mechanism.\n        set static::POLICY_RESULT_POLL_INTERVAL       250\n        set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  600\n        # Set this global variable to 1 for caching authentication failure\n        # Useful for avoiding account locked out.\n        set static::POLICY_RESULT_CACHE_AUTHFAILED    0\n        # set this global variable to set alternative timeout for particular session\n        set static::POLICY_ALT_INACTIVITY_TIMEOUT     120\n        set static::ACCESS_USERKEY_TBLNAME            \"_access_userkey\"\n        set static::ACCESS_DEL_COOKIE_HDR_VAL         \"MRHSession=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/\"\n        log -noname accesscontrol.local1.debug \"01490000:7: RPC_OVER_HTTP_BKEND_BASIC_AUTH = $static::RPC_OVER_HTTP_BKEND_BASIC_AUTH\"\n        log -noname accesscontrol.local1.debug \"01490000:7: EWS_BKEND_BASIC_AUTH = $static::EWS_BKEND_BASIC_AUTH\"\n    }\n    when ACCESS_ACL_ALLOWED {\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX [HTTP::method] [HTTP::uri] [HTTP::header Content-Length]\"\n        if { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 }  {\n            if { $static::RPC_OVER_HTTP_BKEND_BASIC_AUTH == 0 } {\n                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Use this virtual $static::ACCESS_SECOND_VIRTUAL_NAME just once. Will be reset back after disconnection.\"\n                    use virtual $static::ACCESS_SECOND_VIRTUAL_NAME\n                }\n               log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Remove HTTP Auth header\"\n               HTTP::header remove Authorization\n            }\n        }\n        # MSFT Exchange's EWS request handler always requesting NTLM even the connection has been\n        # already authenticated if there is a HTTP Basic Auth in the request.\n        if { [ info exists f_exchange_web_service ] && $f_exchange_web_service  == 1 }  {\n            if { $static::EWS_BKEND_BASIC_AUTH == 0 } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing HTTP Basic Authorization header\"\n                HTTP::header remove Authorization\n            }\n        }\n    }\n    when HTTP_REQUEST {\n        set http_path                       [ string tolower [HTTP::path] ]\n        set f_clientless_mode               0\n        set f_alt_inactivity_timeout        0\n        set f_rpc_over_http                 0\n        set f_exchange_web_service          0\n        set f_auto_discover                 0\n        set f_activesync                    0\n        set f_offline_address_book          0\n        set f_availability_service          0\n        #  Here put appropriate pool when necessary.\n        switch -glob $http_path {\n        \"/rpc/rpcproxy.dll\" {\n            # Supports for RPC over HTTP. (Outlook Anywhere)\n            set f_rpc_over_http 1\n        }\n        \"/autodiscover/autodiscover.xml\" {\n            # Supports for Auto Discover protocol.\n            set f_auto_discover 1\n            # This request does not require long inactivity timeout.\n            # Don't use this for now\n            set f_alt_inactivity_timeout 0\n        }\n        \"/microsoft-server-activesync\" {\n            # Supports for ActiveSync\n            set f_activesync 1\n        }\n        \"/oab/*\" {\n            # Supports for Offline Address Book\n            set f_offline_address_book 1\n        }\n        \"/ews/*\" {\n            # Support for Exchange Web Service\n            # Outlook's Availability Service borrows this protocol.\n            set f_exchange_web_service 1\n        }\n        \"/as/*\" {\n            # Support for Availability Service.\n            # do nothing for now. (Untested)\n            set f_availability_service 1\n        }\n        default {\n            return\n        }\n        }\n        set f_reqside_set_sess_id           0\n        set http_method                     [HTTP::method]\n        set http_hdr_host                   [HTTP::host]\n        set http_hdr_uagent                 [HTTP::header User-Agent]\n        set src_ip                          [IP::remote_addr]\n        set http_uri                        [HTTP::uri]\n        set http_content_len                [HTTP::header Content-Length]\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        set auth_info_b64enc                \"\"\n        if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } {\n            set PROFILE_POLICY_TIMEOUT            [PROFILE::access access_policy_timeout]\n        }\n        if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {\n            set PROFILE_MAX_SESS_TIMEOUT          [PROFILE::access max_session_timeout]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP        1\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX method: $http_method\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Src IP: $src_ip\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX User-Agent: $http_hdr_uagent\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP uri: $http_uri\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP len: $http_content_len\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Restrict-to-single-client-ip: $PROFILE_RESTRICT_SINGLE_IP\"\n        # First, do we have valid MRHSession cookie.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n        set http_hdr_auth [HTTP::header Authorization]\n        if { [ string match -nocase {basic *} $http_hdr_auth ] != 1 } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Not basic authentication. Ignore received auth header\"\n            set http_hdr_auth \"\"\n        }\n        if { $http_hdr_auth == \"\" } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX No/Empty Auth header\"\n            # clean up the cookie\n            if { $MRHSession_cookie == \"\" } {\n                HTTP::respond 401 content  $static::actsync_401_http_body WWW-Authenticate \"Basic realm=\\\"[HTTP::header Host]\\\"\" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection close\n                return\n            }\n            # Do nothing if we have a valid MRHSession cookie.\n        }\n        set f_release_request           0\n        # Optimization for clients which support cookie\n        if { $MRHSession_cookie != \"\" } {\n            # Default profile access setting is false\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                set f_release_request 1\n            }\n            elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched\"\n                set f_release_request 1\n            }\n            else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n        if { $f_release_request == 0 } {\n            set apm_username [ string tolower [HTTP::username]]\n            set apm_password [HTTP::password]\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                binary scan [md5 \"$apm_password\"] H* user_hash\n            } else {\n                binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n            }\n            set user_key    {}\n            append user_key $apm_username \".\" $user_hash\n            unset user_hash\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP Hdr Auth: $http_hdr_auth\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX apm_username: $apm_username\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key = $user_key\"\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $apm_cookie != \"\" } {\n                    HTTP::cookie insert name MRHSession value $apm_cookie\n                    set f_release_request 1\n                }\n            }\n        }\n        if { $http_content_len ==  $static::OA_MAGIC_CONTENT_LEN } {\n            set f_oa_magic_content_len 1\n        }\n        set f_sleep_here 0\n        set retry 1\n        while { $f_release_request == 0 && $retry <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Trying #$retry for $http_method $http_uri $http_content_len\"\n            # This is also going to touch the table entry timer.\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Reading $user_key from table $static::ACCESS_USERKEY_TBLNAME\"\n            set apm_cookie [table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME -notouch $user_key]\n            if { $apm_cookie != \"\" } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Verifying table cookie = $apm_cookie\"\n                # Accessing SessionDB is not that cheap. Here we are trying to check known value.\n                if { $apm_cookie == \"policy_authfailed\" || $apm_cookie == \"policy_inprogress\"} {\n                    # Do nothing\n                } elseif  { ! [ ACCESS::session exists $apm_cookie ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX table cookie = $apm_cookie is out-of-sync\"\n                    # Table value is out of sync. Ignores it.\n                    set apm_cookie \"\"\n                }\n            }\n            switch $apm_cookie {\n            \"\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX NO APM Cookie found\"\n                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {\n                    # Outlook Anywhere request comes in pair. The one with 1G payload is not usable\n                    # for creating new session since 1G content-length is intended for client to upload\n                    # the data when needed.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for request with magic content-len\"\n                    set f_sleep_here 1\n                } elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 && $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {\n                    # Here we are getting large EWS request, which can't be used for starting new session\n                    # in clientless-mode. Have it here waiting for next smaller one.\n                    # We are holding the request here in HTTP filter, and HTTP filter automatically\n                    # clamping down the TCP window when necessary.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for big EWS request\"\n                    set f_sleep_here 1\n                } else {\n                   set apm_cookie               \"policy_inprogress\"\n                   set f_reqside_set_sess_id    1\n                   set f_release_request        1\n                }\n            }\n            \"policy_authfailed\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Found $user_key with AUTH_FAILED\"\n                HTTP::respond 401 content  $static::actsync_401_http_body\n                set f_release_request 1\n            }\n            \"policy_inprogress\" {\n                if { [ info exists f_activesync ] && ($f_activesync == 1) } {\n                    # For ActiveSync requests, aggressively starts new session.\n                    set f_reqside_set_sess_id    1\n                    set f_release_request        1\n                } else {\n                    set f_sleep_here 1\n                }\n            }\n            default {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Using MRHSession = $apm_cookie\"\n                HTTP::header insert Cookie \"MRHSession=$apm_cookie\"\n                set f_release_request 1\n            }\n            }\n            if { $f_reqside_set_sess_id == 1 } {\n                set f_reqside_set_sess_id 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key=$apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\"\n                set f_clientless_mode 1\n                HTTP::cookie remove MRHSession\n                HTTP::header insert \"clientless-mode\" 1\n                HTTP::header insert \"username\" $apm_username\n                HTTP::header insert \"password\" $apm_password\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\n            }\n            if { $f_sleep_here == 1 } {\n                set f_sleep_here 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri\"\n                after  $static::POLICY_RESULT_POLL_INTERVAL\n            }\n            incr retry\n        }\n        if { $f_release_request == 0 && $retry >=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Policy did not finish in [expr { $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL } ] ms. Close connection for $http_method $http_uri\"\n            table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            ACCESS::disable\n            TCP::close\n            return\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri\"\n    }\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n            if { [ info exists f_activesync ] && $f_activesync == 1 } {\n                ACCESS::session data set \"session.user.microsoft-activesync\" 1\n            }\n            elseif { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n                ACCESS::session data set \"session.user.microsoft-autodiscover\" 1\n            }\n            elseif { [ info exists f_availability_service ] && $f_availability_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-availabilityservice\" 1\n            }\n            elseif { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 } {\n                ACCESS::session data set \"session.user.microsoft-rpcoverhttp\" 1\n            }\n            elseif { [ info exists f_offline_address_book ] && $f_offline_address_book == 1 } {\n                ACCESS::session data set \"session.user.microsoft-offlineaddressbook\" 1\n            }\n            elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-exchangewebservice\" 1\n            }\n        }\n        if { [ info exists f_alt_inactivity_timeout ] && $f_alt_inactivity_timeout == 1 } {\n            ACCESS::session data set \"session.inactivity_timeout\"  $static::POLICY_ALT_INACTIVITY_TIMEOUT\n        }\n    }\n    when HTTP_RESPONSE {\n        if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n            set content_len [ HTTP::header Content-Length ]\n            if {  $content_len > 0 } {\n                HTTP::collect $content_len\n            }\n        }\n    }\n    when HTTP_RESPONSE_DATA {\n        if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n            if { [ regsub -line {<AuthPackage>Ntlm</AuthPackage>} [ HTTP::payload ] {<AuthPackage>Basic</AuthPackage>} payload ] != 0 } {\n                HTTP::payload replace 0 $content_len $payload\n            }\n        }\n    }\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n        set user_key_value \"\"\n        set f_delete_session 0\n        set policy_result [ACCESS::policy result]\n        set sid [ ACCESS::session sid ]\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \\\"$policy_result\\\" user_key = \\\"$user_key\\\" sid = \\\"$sid\\\"\"\n        set inactivity_timeout [ACCESS::session data get \"session.inactivity_timeout\"]\n        set max_sess_timeout [ACCESS::session data get \"session.max_session_timeout\"]\n        if { $max_sess_timeout == \"\" } {\n             set max_sess_timeout $PROFILE_MAX_SESS_TIMEOUT\n        }\n        switch $policy_result {\n        \"allow\" {\n            # We depends on this table record self-cleanup capability in order to\n            # indirectly sync with session DB.\n            set user_key_value $sid\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Result: Allow: $user_key => $sid $inactivity_timeout $max_sess_timeout\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key_value = $user_key_value\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX sid = $sid\"\n        }\n        \"deny\" {\n            # When necessary the admin here can check appropriate session variable\n            # and decide what response more appropriate then this default response.\n            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection close\n            if {  $static::POLICY_RESULT_CACHE_AUTHFAILED == 1 } {\n                set user_key_value  $static::POLICY_AUTHFAILED\n            } else {\n                set f_delete_session  1\n            }\n        }\n        default {\n            ACCESS::respond 503 content  $static::actsync_503_http_body Connection close\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)\"\n            set f_delete_session  1\n        }\n        }\n        if { $user_key_value != \"\" } {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $user_key_value $inactivity_timeout $max_sess_timeout in table $static::ACCESS_USERKEY_TBLNAME\"\n           table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $user_key_value $inactivity_timeout $max_sess_timeout\n        } else {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Deleting $user_key in table $static::ACCESS_USERKEY_TBLNAME\"\n           table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n        }\n        if { $f_delete_session == 1 } {\n           ACCESS::session remove\n           set f_delete_session 0\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing the session for $user_key.\"\n        }\n    }\ndefinition-signature ask7ZvjsIV6uvTW96hX6vOlEEBZlb/9PE7FJRiglRmIc+UP3Cb7188DVUorFFTbpGTM/gLe2Qj2OxMP6IEYjNVwJQuD2pQ6Q4lk+dILO5jbTwn2zfuauMIXcO8HpiYow08vQaddT/CxYEsWJwzaakuRgyoJGt/bbeC1u3RdHn4de+3BVBqTMMajKXKzvn13mqH1B/WTs/Z2+ZHw74bKVJ66VXd29tKvD8NQMZGo4oAj2HtCakbxU9b2Tksch4Wmc9RXXiS53cUbk0TK+ZMG3otsUgJnim3BYFqQkBQLxqiChwN5N1Fcp95KOeunJ0qcZDTwuKV4CoRcfMovU0aUOog==",
    "ltm rule _sys_APM_ExchangeSupport_OA_BasicAuth": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    # Global variables\n    # static::POLICY_RESULT_CACHE_AUTHFAILED\n    #     Administrator can set this into 1, when there is a necessity to cache failed policy result.\n    #     This may be needed to avoid account locked caused by the Active Sync device when it uses wrong passwords.\n    #     One possible scenario, is that when the user changes the password in Active Directory, but missed to changed in their devices.\n    # Responses\n    # On denied result\n    #     Administrator can customize the responses to the device depends on more complex conditions when necessary.\n    #     In those cases, please use ACCESS::respond command.\n    #     The following is the syntax of ACCESS::respond\n    #     ACCESS::respond <status code> [ content <body> ] [ <Additional Header> <Additional Header value>* ]\n    #     e.g. ACCESS::respond 401 content \"Error: Denied\" WWW-Authenticate \"basic realm=\\\"f5.com\\\"\" Connection close\n    when RULE_INIT {\n        # Please set the following global variables for customized responses.\n        set static::actsync_401_http_body \"<html><title>Authentication Failured</title><body>Error: Authentication Failure</body></html>\"\n        set static::actsync_503_http_body \"<html><title>Service is not available</title><body>Error: Service is not available</body></html>\"\n        set static::ACCESS_LOG_PREFIX                 \"01490000:7:\"\n        # Second Virtual Server name for 401 NTLM responder\n        set static::ACCESS_SECOND_VIRTUAL_NAME        \"_ACCESS_401_NTLM_responder_HTTPS\"\n        set static::POLICY_INPROGRESS                 \"policy_inprogress\"\n        set static::POLICY_AUTHFAILED                 \"policy_authfailed\"\n        # The request with huge content length can not be used for starting ACCESS session.\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session. The following value is used for Outlook Anywhere.\n        set static::OA_MAGIC_CONTENT_LEN              1073741824\n        # Similar with OutlookAnywhere case, ACCESS can not use the request which is\n        # larger then following size. This becomes an issue with application that using\n        # Exchange Web Service as its main protocol such as Mac OS X applications\n        # (e.g. Mail app, Microsoft Entourage, etc)\n        # This kind of request will be put on hold, and this iRule will try to use another\n        # request to start the session.\n        set static::FIRST_BIG_POST_CONTENT_LEN        640000\n        # Set it into 1 if the backend EWS handler accepts HTTP Basic Authentication.\n        set static::EWS_BKEND_BASIC_AUTH              0\n        # The following variable controls the polling mechanism.\n        set static::POLICY_RESULT_POLL_INTERVAL       250\n        set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  600\n        # Set this global variable to 1 for caching authentication failure\n        # Useful for avoiding account locked out.\n        set static::POLICY_RESULT_CACHE_AUTHFAILED    0\n        # set this global variable to set alternative timeout for particular session\n        set static::POLICY_ALT_INACTIVITY_TIMEOUT     120\n        set static::ACCESS_USERKEY_TBLNAME            \"_access_userkey\"\n        set static::ACCESS_DEL_COOKIE_HDR_VAL         \"MRHSession=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/\"\n        log -noname accesscontrol.local1.debug \"01490000:7: EWS_BKEND_BASIC_AUTH = $static::EWS_BKEND_BASIC_AUTH\"\n    }\n    when ACCESS_ACL_ALLOWED {\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX [HTTP::method] [HTTP::uri] [HTTP::header Content-Length]\"\n        # MSFT Exchange's EWS request handler always requesting NTLM even the connection has been\n        # already authenticated if there is a HTTP Basic Auth in the request.\n        if { [ info exists f_exchange_web_service ] && $f_exchange_web_service  == 1 }  {\n            if { $static::EWS_BKEND_BASIC_AUTH == 0 } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing HTTP Basic Authorization header\"\n                HTTP::header remove Authorization\n            }\n        }\n    }\n    when HTTP_REQUEST {\n        set http_path                       [ string tolower [HTTP::path] ]\n        set f_clientless_mode               0\n        set f_alt_inactivity_timeout        0\n        set f_rpc_over_http                 0\n        set f_exchange_web_service          0\n        set f_auto_discover                 0\n        set f_activesync                    0\n        set f_offline_address_book          0\n        set f_availability_service          0\n        #  Here put appropriate pool when necessary.\n        switch -glob $http_path {\n        \"/rpc/rpcproxy.dll\" {\n            # Supports for RPC over HTTP. (Outlook Anywhere)\n            set f_rpc_over_http 1\n        }\n        \"/autodiscover/autodiscover.xml\" {\n            # Supports for Auto Discover protocol.\n            set f_auto_discover 1\n            # This request does not require long inactivity timeout.\n            # Don't use this for now\n            set f_alt_inactivity_timeout 0\n        }\n        \"/microsoft-server-activesync\" {\n            # Supports for ActiveSync\n            set f_activesync 1\n        }\n        \"/oab/*\" {\n            # Supports for Offline Address Book\n            set f_offline_address_book 1\n            # Don't use this for now\n            set f_alt_inactivity_timeout 0\n        }\n        \"/ews/*\" {\n            # Support for Exchange Web Service\n            # Outlook's Availability Service borrows this protocol.\n            set f_exchange_web_service 1\n        }\n        \"/as/*\" {\n            # Support for Availability Service.\n            # do nothing for now. (Untested)\n            set f_availability_service 1\n        }\n        default {\n            return\n        }\n        }\n        set f_reqside_set_sess_id           0\n        set http_method                     [HTTP::method]\n        set http_hdr_host                   [HTTP::host]\n        set http_hdr_uagent                 [HTTP::header User-Agent]\n        set http_uri                        [HTTP::uri]\n        set http_content_len                [HTTP::header Content-Length]\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        set auth_info_b64enc                \"\"\n        if { ! [ info exists src_ip ] } {\n            set src_ip                            [IP::remote_addr]\n        }\n        if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } {\n            set PROFILE_POLICY_TIMEOUT            [PROFILE::access access_policy_timeout]\n        }\n        if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {\n            set PROFILE_MAX_SESS_TIMEOUT          [PROFILE::access max_session_timeout]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP        1\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX method: $http_method\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Src IP: $src_ip\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX User-Agent: $http_hdr_uagent\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP uri: $http_uri\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP len: $http_content_len\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Restrict-to-single-client-ip: $PROFILE_RESTRICT_SINGLE_IP\"\n        # First, do we have valid MRHSession cookie.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n        set http_hdr_auth [HTTP::header Authorization]\n        if { [ string match -nocase {basic *} $http_hdr_auth ] != 1 } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Not basic authentication. Ignore received auth header\"\n            set http_hdr_auth \"\"\n        }\n        if { $http_hdr_auth == \"\" } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX No/Empty Auth header\"\n            # clean up the cookie\n            if { $MRHSession_cookie == \"\" } {\n                HTTP::respond 401 content  $static::actsync_401_http_body WWW-Authenticate \"Basic realm=\\\"[HTTP::header Host]\\\"\" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n                return\n            }\n            # Do nothing if we have a valid MRHSession cookie.\n        }\n        set f_release_request           0\n        # Optimization for clients which support cookie\n        if { $MRHSession_cookie != \"\" } {\n            # Default profile access setting is false\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                set f_release_request 1\n            }\n            elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched\"\n                set f_release_request 1\n            }\n            else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n        }\n        if { $f_release_request == 0 } {\n            set apm_username [string tolower [HTTP::username]]\n            set apm_password [HTTP::password]\n            if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                binary scan [md5 \"$apm_password\"] H* user_hash\n            }\n            else {\n                binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n            }\n            set user_key    \"$apm_username.$user_hash\"\n            unset user_hash\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP Hdr Auth: $http_hdr_auth\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX apm_username: $apm_username\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key = $user_key\"\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $apm_cookie != \"\" } {\n                    HTTP::cookie insert name MRHSession value $apm_cookie\n                    set f_release_request 1\n                }\n            }\n        }\n        if { $http_content_len ==  $static::OA_MAGIC_CONTENT_LEN } {\n            set f_oa_magic_content_len 1\n        }\n        set f_sleep_here 0\n        set retry 1\n        while { $f_release_request == 0 && $retry <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Trying #$retry for $http_method $http_uri $http_content_len\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Reading $user_key from table $static::ACCESS_USERKEY_TBLNAME\"\n            set apm_cookie [table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME -notouch $user_key]\n            if { $apm_cookie != \"\" } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Verifying table cookie = $apm_cookie\"\n                # Accessing SessionDB is not that cheap. Here we are trying to check known value.\n                if { $apm_cookie == \"policy_authfailed\" || $apm_cookie == \"policy_inprogress\"} {\n                    # Do nothing\n                } elseif  { ! [ ACCESS::session exists $apm_cookie ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX table cookie = $apm_cookie is out-of-sync\"\n                    # Table value is out of sync. Ignores it.\n                    set apm_cookie \"\"\n                }\n            }\n            switch $apm_cookie {\n            \"\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX NO APM Cookie found\"\n                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {\n                    # Outlook Anywhere request comes in pair. The one with 1G payload is not usable\n                    # for creating new session since 1G content-length is intended for client to upload\n                    # the data when needed.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for request with magic content-len\"\n                    set f_sleep_here 1\n                } elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 && $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {\n                    # Here we are getting large EWS request, which can't be used for starting new session\n                    # in clientless-mode. Have it here waiting for next smaller one.\n                    # We are holding the request here in HTTP filter, and HTTP filter automatically\n                    # clamping down the TCP window when necessary.\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for big EWS request\"\n                    set f_sleep_here 1\n                } else {\n                   set apm_cookie               \"policy_inprogress\"\n                   set f_reqside_set_sess_id    1\n                   set f_release_request        1\n                }\n            }\n            \"policy_authfailed\" {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Found $user_key with AUTH_FAILED\"\n                HTTP::respond 401 content  $static::actsync_401_http_body\n                set f_release_request 1\n            }\n            \"policy_inprogress\" {\n                if { [ info exists f_activesync ] && ($f_activesync == 1) } {\n                    # For ActiveSync requests, aggressively starts new session.\n                    set f_reqside_set_sess_id    1\n                    set f_release_request        1\n                } else {\n                    set f_sleep_here 1\n                }\n            }\n            default {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Using MRHSession = $apm_cookie\"\n                HTTP::header insert Cookie \"MRHSession=$apm_cookie\"\n                set f_release_request 1\n            }\n            }\n            if { $f_reqside_set_sess_id == 1 } {\n                set f_reqside_set_sess_id 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key=$apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_POLICY_TIMEOUT\"\n                set f_clientless_mode 1\n                HTTP::cookie remove MRHSession\n                HTTP::header insert \"clientless-mode\" 1\n                HTTP::header insert \"username\" $apm_username\n                HTTP::header insert \"password\" $apm_password\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_POLICY_TIMEOUT\n            }\n            if { $f_sleep_here == 1 } {\n                set f_sleep_here 0\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri\"\n                after  $static::POLICY_RESULT_POLL_INTERVAL\n            }\n            incr retry\n        }\n        if { ($f_release_request == 0) && ($retry >=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE) } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Policy did not finish in [expr { $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL } ] ms. Close connection for $http_method $http_uri\"\n            table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            ACCESS::disable\n            TCP::close\n            return\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri\"\n    }\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n            if { [ info exists f_activesync ] && $f_activesync == 1 } {\n                ACCESS::session data set \"session.user.microsoft-activesync\" 1\n            }\n            elseif { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {\n                ACCESS::session data set \"session.user.microsoft-autodiscover\" 1\n            }\n            elseif { [ info exists f_availability_service ] && $f_availability_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-availabilityservice\" 1\n            }\n            elseif { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 } {\n                ACCESS::session data set \"session.user.microsoft-rpcoverhttp\" 1\n            }\n            elseif { [ info exists f_offline_address_book ] && $f_offline_address_book == 1 } {\n                ACCESS::session data set \"session.user.microsoft-offlineaddressbook\" 1\n            }\n            elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 } {\n                ACCESS::session data set \"session.user.microsoft-exchangewebservice\" 1\n            }\n        }\n        if { [ info exists f_alt_inactivity_timeout ] && $f_alt_inactivity_timeout == 1 } {\n            ACCESS::session data set \"session.inactivity_timeout\"  $static::POLICY_ALT_INACTIVITY_TIMEOUT\n        }\n    }\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n        set user_key_value \"\"\n        set f_delete_session 0\n        set policy_result [ACCESS::policy result]\n        set sid [ ACCESS::session sid ]\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \\\"$policy_result\\\" user_key = \\\"$user_key\\\" sid = \\\"$sid\\\"\"\n        set inactivity_timeout [ACCESS::session data get \"session.inactivity_timeout\"]\n        set max_sess_timeout [ACCESS::session data get \"session.max_session_timeout\"]\n        if { $max_sess_timeout == \"\" } {\n             set max_sess_timeout $PROFILE_MAX_SESS_TIMEOUT\n        }\n        switch $policy_result {\n        \"allow\" {\n            # We depends on this table record self-cleanup capability in order to\n            # indirectly sync with session DB.\n            set user_key_value $sid\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Result: Allow: $user_key => $sid $inactivity_timeout $max_sess_timeout\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX user_key_value = $user_key_value\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX sid = $sid\"\n        }\n        \"deny\" {\n            # When necessary the admin here can check appropriate session variable\n            # and decide what response more appropriate then this default response.\n            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n            if {  $static::POLICY_RESULT_CACHE_AUTHFAILED == 1 } {\n                set user_key_value  $static::POLICY_AUTHFAILED\n            } else {\n                set f_delete_session  1\n            }\n        }\n        default {\n            ACCESS::respond 503 content  $static::actsync_503_http_body Connection Close\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)\"\n            set f_delete_session  1\n        }\n        }\n        if { $user_key_value != \"\" } {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $user_key_value $inactivity_timeout $max_sess_timeout in table $static::ACCESS_USERKEY_TBLNAME\"\n           table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $user_key_value $inactivity_timeout $max_sess_timeout\n        } else {\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Deleting $user_key in table $static::ACCESS_USERKEY_TBLNAME\"\n           table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n        }\n        if { $f_delete_session == 1 } {\n           ACCESS::session remove\n           set f_delete_session 0\n           log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing the session for $user_key.\"\n        }\n    }\ndefinition-signature H5CYoxBTBYqkK6ZFPeoX68vIv3V9TsbZCwIutNCnPovGN2T8TFPGOUqCX2RL7RhG2y5AAUMPDAat8KDHfy2hQpzENUuW1f0ZmrBg5SCeJdo5FINqqHgwydriQx14njq+FPYTgRYo/j9NxyNzeN9LsiYt6fccBOSzpXqXTfkU0D0ES6QfCsNNoDAsFRBBu9FDT+TjHOz8d2XqRlUZQ/bosGp8NPgU5hGlHkaPbq0tZS90DqmX+CNBcipQHohaJYipyfEryYvHVkC6qet0yKq3jjq0X7CgG3g3WTbXI7U+CMvCb3j1jJlCwdn7b1KWd/ghdKVPgmzTdx+GIoWWLGhelQ==",
    "ltm rule _sys_APM_ExchangeSupport_OA_NtlmAuth": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when RULE_INIT {\n        set static::POLICY_INPROGRESS                 \"policy_inprogress\"\n        set static::POLICY_FAILED                     \"policy_failed\"\n        set static::POLICY_SUCCEED                    \"policy_succeed\"\n        set static::POLICY_DONE_WAIT_SEC              5\n        set static::FIRST_BIG_POST_CONTENT_LEN        640000\n        set static::POLICY_RESULT_POLL_INTERVAL       100\n        set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  100\n        set static::ACCESS_USERKEY_TBLNAME            \"_access_userkey\"\n        set static::ACCESS_LOG_PREFIX                 \"01490000:7:\"\n        set static::USE_NTLM_AUTH                     0\n        set static::USE_BASIC_AUTH                    1\n        set static::USE_NTLM_BASIC_AUTH               2\n        set static::URL_DEFAULT                       0\n        set static::URL_RPC_OVER_HTTP                 1\n        set static::URL_AUTODISCOVER                  2\n        set static::URL_ACTIVE_SYNC                   3\n        set static::URL_OFFLINEADDRESSBOOK            4\n        set static::URL_EXCHANGEWEBSERVICE            5\n        set static::RECVD_AUTH_NONE                   0\n        set static::RECVD_AUTH_NTLM                   1\n        set static::RECVD_AUTH_BASIC                  2\n        set static::ACCESS_DEL_COOKIE_HDR_VAL         \"MRHSession=deleted; \\\n                                                       expires=Thu, 01-Jan-1970 00:00:01 GMT;\\\n                                                       path=/\"\n    }\n    when HTTP_REQUEST {\n        set http_path                       [string tolower [HTTP::path]]\n        set url_path                        $static::URL_DEFAULT\n        set use_auth                        $static::USE_NTLM_AUTH\n        set f_disable_sso                   0\n        switch -glob $http_path {\n        \"/rpc/rpcproxy.dll\" {\n            set url_path                    $static::URL_RPC_OVER_HTTP\n        }\n        \"/autodiscover/autodiscover.xml\" {\n            set url_path                    $static::URL_ACTIVE_SYNC\n            # Need to support both NTLM and Basic authentication for this URL\n            set use_auth                    $static::USE_NTLM_BASIC_AUTH\n        }\n        \"/microsoft-server-activesync*\" {\n            set url_path                    $static::URL_ACTIVE_SYNC\n            # Use only Basic authentication for this URL\n            set use_auth                    $static::USE_BASIC_AUTH\n            set f_disable_sso               1\n        }\n        \"/oab*\" {\n            set url_path                    $static::URL_OFFLINEADDRESSBOOK\n        }\n        \"/ews*\" {\n            set url_path                    $static::URL_EXCHANGEWEBSERVICE\n        }\n        default {\n            ECA::disable\n            return\n        }\n        }\n        if { ! [ info exists f_ntlm_auth_succeed ] } {\n            set f_ntlm_auth_succeed         0\n        }\n        if { ! [ info exists sid_cache ] } {\n            set sid_cache                         \"\"\n        }\n        if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } { \n            set PROFILE_POLICY_TIMEOUT            [PROFILE::access access_policy_timeout]\n        }\n        if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {\n            set PROFILE_MAX_SESS_TIMEOUT          [PROFILE::access max_session_timeout]\n        }\n        if { ! [ info exists src_ip ] } {\n            set src_ip                            [IP::remote_addr]\n        }\n        if { ! [ info exists PROFILE_RESTRICT_SINGLE_IP ] } {\n            set PROFILE_RESTRICT_SINGLE_IP        1\n        }\n        set http_method                     [HTTP::method]\n        set http_hdr_host                   [HTTP::host]\n        set http_hdr_uagent                 [HTTP::header User-Agent]\n        set http_uri                        [HTTP::uri]\n        set http_content_len                [HTTP::header Content-Length]\n        set MRHSession_cookie               [HTTP::cookie value MRHSession]\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX method:      $http_method\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Src IP:      $src_ip\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX User-Agent:  $http_hdr_uagent\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP uri:    $http_uri\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP len:    $http_content_len\"\n        if { ! [ info exists ECA_METADATA_ARG ] } {\n            # Generating argument for ECA::metadata\n            # The NTLM configuration name is derived from assigned virtual name with the algorithm as follows:\n            # <virtual-fullpath> ::= <folder-path>\"/\"<virtual-basename> as \"/\" is the last \"/\" char.\n            # <config-fullpath>  ::= <folder-path>\"/\" \"exch_ntlm\" \"_\" <virtual-basename>\n            # e.g.  Let us say the virtual name is \"/prod/exch/vs1\", The folder path is \"/prod/exch/\",\n            #       then object name will be \"/prod/exch/exch_ntlm_vs1\".\n            set vs_name [virtual name]\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX virtual:     $vs_name\"\n            set slash_index [ string last / $vs_name ]\n            if { $slash_index == -1 } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Error: the virtual name does not contain folder information\"\n                ACCESS::disable\n                TCP::close\n                return\n            }\n            set ECA_METADATA_ARG    \"select_ntlm:\"\n            append ECA_METADATA_ARG [ string range $vs_name 0 $slash_index ]\n            append ECA_METADATA_ARG \"exch_ntlm_\"\n            append ECA_METADATA_ARG [ string range $vs_name [ expr { $slash_index + 1 } ] end ]\n            unset slash_index\n            unset vs_name\n        }\n        if { $use_auth == $static::USE_NTLM_AUTH } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Enable ECA: $ECA_METADATA_ARG\"\n            ECA::enable\n            ECA::select $ECA_METADATA_ARG\n            return\n        } else {\n            set recvd_auth                      $static::RECVD_AUTH_NONE\n            set http_hdr_auth                   [HTTP::header Authorization]\n            set auth_data                       [split $http_hdr_auth \" \"]\n            if { $http_hdr_auth != \"\" } {\n                if { [ llength $auth_data ] == 2 } {\n                    set auth_scheme [ lindex $auth_data 0]\n                    if { [string equal -nocase $auth_scheme \"ntlm\" ] == 1 } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Recv'd HTTP NTLM Authentication\"\n                        set recvd_auth          $static::RECVD_AUTH_NTLM\n                    } elseif { [ string equal -nocase [ lindex $auth_data 0] \"basic\" ] == 1 } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Recv'd HTTP Basic Authentication\"\n                        set recvd_auth          $static::RECVD_AUTH_BASIC\n                        set user                [string tolower [HTTP::username]]\n                        set password            [HTTP::password]\n                    }\n                }\n            }\n            if { $use_auth == $static::USE_BASIC_AUTH } {\n                if { $recvd_auth == $static::RECVD_AUTH_BASIC } {\n                    # Defer the process until later\n                } else {\n                    HTTP::respond 401 -version 1.1 noserver WWW-Authenticate \"Basic realm=\\\"$http_hdr_host\\\"\" \\\n                                Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n                    return\n                }\n            } elseif { $use_auth == $static::USE_NTLM_BASIC_AUTH } {\n                if { ($recvd_auth == $static::RECVD_AUTH_NTLM) || ($f_ntlm_auth_succeed == 1) } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Enable ECA: $ECA_METADATA_ARG\"\n                    ECA::enable\n                    ECA::select $ECA_METADATA_ARG\n                    return\n                } elseif { $recvd_auth == $static::RECVD_AUTH_BASIC } {\n                    # Defer the process until later\n                } else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Request Authorization: NTLM + Basic\"\n                    HTTP::respond 401 -version 1.1 noserver WWW-Authenticate \"Basic realm=\\\"$http_hdr_host\\\"\" \\\n                                WWW-Authenticate \"NTLM\" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n                    return\n                }\n            }\n            # Disable NTLM auth\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Disable ECA\"\n            ECA::disable\n            # Disable KCD sso\n            set f_disable_sso               1\n            if { $MRHSession_cookie != \"\" } {\n                if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n                    # Default profile access setting is false\n                    if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Release the request\"\n                        return\n                    }\n                    elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched. Release the request\"\n                        return\n                    }\n                    else {\n                        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                    }\n                }\n                else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n                }\n                set MRHSession_cookie \"\"\n                HTTP::cookie remove MRHSession\n            }\n            set user_key                {}\n            if { $PROFILE_RESTRICT_SINGLE_IP == 1 } {\n                append user_key                    $src_ip\n            }\n            append user_key                 $password\n            binary scan [md5 $user_key ] H* user_key\n            set user_key                    \"$user.$user_key\"\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set MRHSession_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $MRHSession_cookie != \"\" } {\n                    HTTP::cookie remove MRHSession \n                    HTTP::cookie insert name MRHSession value $MRHSession_cookie\n                    return\n                }\n            }\n            HTTP::cookie remove MRHSession\n            HTTP::header insert \"clientless-mode\"       1\n            HTTP::header insert \"username\"              $user\n            HTTP::header insert \"password\"              $password\n            return\n        }\n    }\n    when ECA_REQUEST_ALLOWED {\n        set f_ntlm_auth_succeed                 1\n        if { $MRHSession_cookie == \"\" } {\n            # Retrieve from SID cache\n            set MRHSession_cookie   $sid_cache\n            HTTP::cookie insert name MRHSession value $sid_cache\n        }\n        if { $MRHSession_cookie != \"\" } {\n            # Destroy session ID cache. This client should not need session ID cache \n            if { ($sid_cache != \"\") && ($sid_cache != $MRHSession_cookie) } {\n                set sid_cache   \"\"\n            }\n            if { [ ACCESS::session exists -state_allow $MRHSession_cookie ] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n                # Default profile access setting is false\n                if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Release the request\"\n                    return\n                }\n                elseif { [ IP::addr $src_ip equals [ ACCESS::session data get -sid $MRHSession_cookie \"session.user.clientip\" ] ] } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP matched. Release the request\"\n                    return\n                }\n                else {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX source IP does not matched\"\n                }\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n            }\n        }\n        set MRHSession  \"\"\n        set sid_cache   \"\"\n        HTTP::cookie remove MRHSession\n        # Build user_key\n        set    user_key                 {}\n        append user_key                 [string tolower [ECA::username]] \"@\" [ string tolower [ECA::domainname] ]\n        if { $PROFILE_RESTRICT_SINGLE_IP == 0 } {\n            append user_key             \":\" $src_ip\n        }\n        append user_key                 \":\" [ECA::client_machine_name]\n        set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n        if { [ llength $apm_cookie_list ] != 0 } {\n            set MRHSession_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n            if { $MRHSession_cookie != \"\" } {\n                set sid_cache           $MRHSession_cookie\n                HTTP::cookie insert name MRHSession value $MRHSession_cookie\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX APM Cookie found: $sid_cache\"\n                return\n            }\n        }\n        unset apm_cookie_list\n        set try                         1\n        set start_policy_str            $src_ip\n        append start_policy_str         [TCP::client_port]\n        while { $try <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX NO APM Cookie found\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Trying #$try for $http_method $http_uri $http_content_len\"\n            if { $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {\n                # Wait at below\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX EXEC: table set -notouch -subtable  $static::ACCESS_USERKEY_TBLNAME -excl $user_key $start_policy_str $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\"\n                set policy_status [table set -notouch -subtable  $static::ACCESS_USERKEY_TBLNAME -excl $user_key $start_policy_str $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT]\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX DONE: table set -notouch -subtable  $static::ACCESS_USERKEY_TBLNAME -excl $user_key $start_policy_str $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT\"\n                if { $policy_status == $start_policy_str } {\n                    # ACCESS Policy has not started. Start one\n                    HTTP::header insert \"clientless-mode\"    1\n                    break\n                } elseif { $policy_status == $static::POLICY_SUCCEED } {\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX table is out-of-sync retry\"\n                    table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n                    continue\n                } elseif { $policy_status == $static::POLICY_FAILED } {\n                    ACCESS::disable\n                    TCP::close\n                    return\n                }\n                # Wait at below\n            }\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri\"\n            # Touch the entry table\n            table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            after  $static::POLICY_RESULT_POLL_INTERVAL\n            set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n            if { [ llength $apm_cookie_list ] != 0 } {\n                set MRHSession_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n                if { $MRHSession_cookie != \"\" } {\n                    set sid_cache           $MRHSession_cookie\n                    HTTP::cookie insert name MRHSession value $MRHSession_cookie\n                    log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX APM Cookie found: $sid_cache\"\n                    return\n                }\n            }\n            incr try\n        }\n        if { $try >  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Policy did not finish in [ expr { $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL } ] ms. Close connection for $http_method $http_uri\"\n            table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key\n            ACCESS::disable\n            TCP::close\n            return\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri\"\n        unset try\n        unset start_policy_str\n    }\n    when ECA_REQUEST_DENIED {\n        set f_ntlm_auth_succeed                 0\n    }\n    when HTTP_RESPONSE_RELEASE {\n        if { ! [info exists user_key] } {\n            return\n        }\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: status:           [HTTP::status]\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: Server:           [HTTP::header Server]\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: Content-Length:   [HTTP::header Content-Length]\"\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX HTTP response: WWW-Authenticate: [HTTP::header WWW-Authenticate]\"\n    }\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists user_key ] } {\n            ACCESS::session data set \"session.user.uuid\" $user_key\n            ACCESS::session data set \"session.user.microsoft-exchange-client\" 1\n        }\n    }\n    when ACCESS_ACL_ALLOWED {\n        if { [ info exists f_disable_sso ] && $f_disable_sso == 1 } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Disable WEBSSO\"\n            WEBSSO::disable\n        }\n    }\n    when ACCESS_POLICY_COMPLETED {\n        if { ! [ info exists user_key ] } {\n            return\n        }\n        set user_key_value \"\"\n        set f_delete_session 0\n        set policy_result [ACCESS::policy result]\n        set sid [ ACCESS::session sid ]\n        log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \\\"$policy_result\\\" user_key = \\\"$user_key\\\" sid = \\\"$sid\\\"\"\n        switch $policy_result {\n        \"allow\" {\n            set user_key_value          $sid\n            set sid_cache               $user_key_value\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Result: Allow: $user_key\"\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX sid = $sid\"\n        }\n        \"deny\" {\n            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close\n            set f_delete_session  1\n        }\n        default {\n            ACCESS::respond 503 content  $static::actsync_503_http_body Connection Close\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)\"\n            set f_delete_session  1\n        }\n        }\n        if { $f_ntlm_auth_succeed == 1 } {\n            if { $user_key_value != \"\" } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $static::POLICY_SUCCEED\"\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $static::POLICY_SUCCEED\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Setting $user_key => $static::POLICY_FAILED  $static::POLICY_DONE_WAIT_SEC $static::POLICY_DONE_WAIT_SEC_in table $static::ACCESS_USERKEY_TBLNAME\"\n                table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $static::POLICY_FAILED  $static::POLICY_DONE_WAIT_SEC $static::POLICY_DONE_WAIT_SEC\n            }\n        }\n        if { $f_delete_session == 1 } {\n            ACCESS::session remove\n            set f_delete_session 0\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_PREFIX Removing the session for $user_key.\"\n        }\n    }\ndefinition-signature r8S3kABK0vdxA0Gp40e6xD2LQblbxGAkRljfRv6aqqEPI7CzHdLHa6Own6/2+ao+rqYecm5mqNGUr2StMN1FwrTp8grRVhJFy4G3UmIYm8EGsHQWkQ+4UClXNHJsJYIBEBY0BaLtcf47O46Hsixv51FcdBTsAGmHjttSs2m5iOPXp/vgCY4CgqzCHMHshNLqX23c1y2iehSqpBm9K1YgQIFE0jpIA/k6LcELD0Ck13mTtVSrMWZjelrwTWj2o0FzAfHVDoQRtGzVZDC5bdYgpzeY75vFvx16wUbIy2eGJXHnkvf6D7Mggk5PyZ4UguoQtdiPJhNQU18X9lBDl6xZFQ==",
    "ltm rule _sys_APM_Office365_SAML_BasicAuth": "    nowrite nodelete\n# Copyright 2003-2006, 2012-2013, 2016, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n    when RULE_INIT {\n        set static::ACCESS_LOG_ECP_PREFIX       \"014d0002:7: ECP client\"\n    }\n    when HTTP_REQUEST {\n        set http_path            [string tolower [HTTP::path]]\n        set http_hdr_auth        [HTTP::header Authorization]\n        set http_hdr_client_app  [HTTP::header X-MS-Client-Application]\n        set http_hdr_client_ip   [HTTP::header X-MS-Forwarded-Client-IP]\n        set MRHSession_cookie    [HTTP::cookie value MRHSession]\n        if { ($http_path == \"/saml/idp/profile/redirectorpost/sso\") &&\n             ($http_hdr_client_app != \"\") &&\n             ($http_hdr_client_app contains \"Microsoft.Exchange\") } {\n            HTTP::uri \"/saml/idp/profile/ecp/sso\"\n        } elseif { ($http_path != \"/saml/idp/profile/ecp/sso\")  } {\n            return\n        }\n        set f_saml_ecp_request 1\n        unset http_path\n        # If MRHSession cookie from client is present, skip further processing.\n        if { $MRHSession_cookie != \"\" } {\n            if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_ECP_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie\"\n            } else {\n                log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_ECP_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie\"\n            }\n            return\n        }\n        if { ($http_hdr_client_app != \"\") &&\n            ($http_hdr_client_app contains \"Microsoft.Exchange\") &&\n            ($http_hdr_client_ip != \"\") } {\n\t    set src_ip $http_hdr_client_ip\n\t}\n        unset http_hdr_client_app\n        unset http_hdr_client_ip\n        if { ! [ info exists src_ip ] } {\n            set src_ip          [IP::remote_addr]\n        }\n        # Only allow HTTP Basic Authentication.\n        if { ($http_hdr_auth == \"\") || ([ string match -nocase {basic *} $http_hdr_auth ] != 1 ) } {\n            log -noname accesscontrol.local1.debug \"$static::ACCESS_LOG_ECP_PREFIX ECP request does not contain HTTP Basic Authorization header.\"\n            unset http_hdr_auth\n            return\n        }\n        set apm_username        [ string tolower [HTTP::username] ]\n        set apm_password        [HTTP::password]\n        binary scan [md5 \"$apm_password$src_ip\"] H* user_hash\n        set user_key {}\n        append user_key $apm_username \".\" $user_hash\n        unset user_hash\n        set apm_cookie_list             [ ACCESS::user getsid $user_key ]\n        if { [ llength $apm_cookie_list ] != 0 } {\n            set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]\n            if { $apm_cookie != \"\" } {\n                HTTP::cookie insert name MRHSession value $apm_cookie\n            }\n        }\n        HTTP::header insert \"clientless-mode\" 1\n        HTTP::header insert \"username\" $apm_username\n        HTTP::header insert \"password\" $apm_password\n        unset apm_username\n        unset apm_password\n        unset http_hdr_auth\n    }\n    when ACCESS_SESSION_STARTED {\n        if { [ info exists f_saml_ecp_request ] && $f_saml_ecp_request == 1 } {\n            if { [ info exists user_key ] } {\n                ACCESS::session data set \"session.user.uuid\" $user_key\n            }\n            if { [ info exists  src_ip ] } {\n                ACCESS::session data set \"session.user.clientip\" $src_ip\n            }\n        }\n    }\n    when HTTP_RESPONSE {\n        if { [ info exists f_saml_ecp_request ] && $f_saml_ecp_request == 1 } {\n            unset f_saml_ecp_request\n            unset apm_cookie\n        }\n    }\ndefinition-signature sh9fhU/ivCiEmLpiA6flX8sH3IBE1GgTQ7OpLxOMyU5ccTa9gKTiJz3/4XXZcBOxAmMBCWs8KMtArFBMI32y7QdXYLKDmvuwEEPw4vzVj0SkXzErcOpxouU0eUcn09fFOJ4cL175272f0giLFJZTPHYBRMjKNtm8vWvR65rTj02KCwueArpP5iQUR5yXdymvFB7YbCNxkl/dujJOyecdCBqcjf77l8NsgtOzv6mUHfSDcyVjEKUSGKMMLxb86hkCZODuyKv4oGC6Mgc6IOyDONOJKq7jol/CPF4aoVEqMV86EjxFudlFpGXZ+FoUrboBEkWJnqHoSDd5CMwMZA2TYQ==",
    "ltm rule _sys_APM_MS_Office_OFBA_Support": "    nowrite nodelete\n# Copyright 2003-2006, 2012, 2016-2017, 2019.  F5 Networks, Inc.  See End User License Agreement (\"EULA\")\n# for license terms. Notwithstanding anything to the contrary in the EULA,\n# Licensee may copy and modify this software product for its internal business\n# purposes. Further, Licensee may upload, publish and distribute the modified\n# version of the software product on devcentral.f5.com.\n#\n# Supporting MS-OFBA protocol for native office applications.\n# sys_APM_MS_Office_OFBA_DG - iRule data group to customize ofba user agent strings and\n#                     few other parameters.\n#\n# sys_APM_MS_Office_OFBA_DG::useragent - useragent strings are mandatory, \n#       these strings are used to detect OFBA clients. All user agent strings should start\n#       with useragent name, for e.g: useragent1, useragent2.. etc.\n#\n# sys_APM_MS_Office_OFBA_DG::ie_sp_session_sharing_enabled - Parameter to specify whether to enable or\n#       disable IE session sharing using persistent cookie named \"MRHSOffice\".\n#       Default is disabled (0), value can be 0 or 1\n#     \n# sys_APM_MS_Office_OFBA_DG::ie_sp_session_sharing_inactivity_timeout - inactivity timeout value \n#       for the persistent cookie value \"MRHSOffice\"\n#       everytime, the SharePoint site refreshes or gets any response from\n#       SharePoint Server.  Value can be any positive value given in seconds.\n#       Default value as 60 secs\n#\n# sys_APM_MS_Office_OFBA_DG::ofba_auth_dialog_size - OFBA dialog browser\n#       resolution size given as widthxheight, default 800x600\n#\n# static::MS_OFBA_ENABLED_CLIENT_TYPE - \"ms-ofba-compliant\" session variable\n#       value that can be used in Access policy Logon agent branch, to add the required authentication\n#       for MS OFBA compliant applications.\n#\n    proc write_log {level message} {\n        ACCESS::log $level \"\\[MSOFBA\\] $message\"\n#       Logs printing for 12.x or older releases\n#       log -noname accesscontrol.local1.$level \"01490000: \\[MSOFBA\\] $message\"\n    }\n    proc is_ofba_passthrough_uri {uri} {\n        for { set i 0 } { $i < [llength $static::MS_OFBA_PASSTHROUGH_URI_LIST] } { incr i } {\n            if { $uri == [lindex $static::MS_OFBA_PASSTHROUGH_URI_LIST $i] } {\n                return 1;\n            }\n        }\n        return 0\n    }\n    when RULE_INIT {\n        set static::MS_OFBA_ENABLED_CLIENT_TYPE \"ms-ofba-compliant\"\n        set static::MS_OFBA_AUTH_REQ_URI \"/ms-ofba-req-auth\"\n        set static::MS_OFBA_AUTH_RETURN_URI \"/ms-ofba-auth-success\"\n        set static::MS_OFBA_AUTH_DIALOG_SZ \"800x600\"\n        set static::MS_OFBA_AUTH_SUCCESS_BODY \"<html><head><title>User Authenticated</title></head><body><b>Successful OFBA authentication</b></body></html>\"\n        set static::MS_OFBA_IRULE_DG \"sys_APM_MS_Office_OFBA_DG\"\n        set static::MULTI_DOMAIN_AUTH_RESP_URI \"/f5networks-sso-resp\"\n        set static::MS_OFBA_PASSTHROUGH_URI_LIST {$static::MULTI_DOMAIN_AUTH_RESP_URI \"/my.status.eps\" \"/my.report.eps\"}\n# sp_persistent_ck: would help to share the session from sharepoint site to\n# office applications, if enabled.\n        set static::SP_PERSISTENT_CK \"MRHSOffice\"\n        set static::SP_PERSISTENT_CK_TIMEOUT 60\n        set static::MS_OFBA_AUTH_TYPE_COOKIE \"Auth-Type\"\n        set static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE \"ms-ofba\"\n    }\n    when CLIENT_ACCEPTED {\n        if { ![info exists ofba_user_agent_list] } {\n# check for config change from datagroup\n# since this iRule is read-only, dg config change is done in CLIENT_ACCEPTED rather than in RULE_INIT\n            set ofba_user_agent_list [class search -value -all $static::MS_OFBA_IRULE_DG starts_with useragent]\n            set f_sp_persistent_ck [class search -value $static::MS_OFBA_IRULE_DG equals ie_sp_session_sharing_enabled]\n            set sp_persistent_ck_timeout [class search -value $static::MS_OFBA_IRULE_DG equals ie_sp_session_sharing_inactivity_timeout]\n            set ofba_auth_dialog_sz [class search -value $static::MS_OFBA_IRULE_DG equals ofba_auth_dialog_size]\n        }\n    }\n    when HTTP_REQUEST {\n# client detection, for ofba client\n        set ms_sp_client_type \"none\"\n        set http_path [string tolower [HTTP::path]]\n        set http_user_agent [string tolower [HTTP::header \"User-Agent\"]]\n        set session_id [HTTP::cookie value \"MRHSession\"]\n        set f_allow_session 0\n        set ms_ofba_auth_cookie \"\"\n        if {[HTTP::header exists \"X-FORMS_BASED_AUTH_ACCEPTED\"] &&\n            (([HTTP::header \"X-FORMS_BASED_AUTH_ACCEPTED\"] equals \"t\") ||\n             ([HTTP::header \"X-FORMS_BASED_AUTH_ACCEPTED\"] equals \"f\"))} {\n                set ms_sp_client_type \"ms-ofba\"\n            } elseif { $http_path == $static::MS_OFBA_AUTH_REQ_URI } {\n                set ms_sp_client_type \"ms-ofba\"\n            } else {\n                if {(!($http_user_agent contains \"frontpage\") && [string match -nocase {*mozilla*} $http_user_agent]) ||\n                    [string match -nocase {*opera*} $http_user_agent]} {\n                        set ms_sp_client_type \"browser\"\n                        set ms_ofba_auth_cookie [HTTP::cookie value $static::MS_OFBA_AUTH_TYPE_COOKIE]\n                        if { $ms_ofba_auth_cookie == $static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE } {\n                            # ofba authentication is still in progress, there may be a case where initial\n                            # access denied and user is retrying the session without closing the ofba\n                            # initiated browser\n                            set ms_sp_client_type \"ms-ofba\"\n                            call write_log debug \"Detecting the client type as ms-ofba based auth type cookie\"\n                        }\n                    } else {\n                        foreach ofba_user_agent $ofba_user_agent_list {\n                            set ofba_user_agent [string trim $ofba_user_agent]\n                            if { $ofba_user_agent != \"\" && [string match -nocase *$ofba_user_agent* $http_user_agent] } {\n                                set ms_sp_client_type \"ms-ofba\"\n                                    break\n                            }\n                        }\n                    }\n            }\n        if { $ms_sp_client_type == \"ms-ofba\" } {\n            call write_log debug \"Client-type: (ms-ofba-compliant), http path: ($http_path), user agent: ($http_user_agent)\"\n        }\n        if { $ms_sp_client_type != \"ms-ofba\" } {\n            return\n        } elseif { $session_id != \"\" } {\n            if { [ACCESS::session exists -state_allow $session_id] } {\n                set f_allow_session 1\n                return\n            }\n        } elseif { $f_sp_persistent_ck == \"1\" && [HTTP::cookie exists $static::SP_PERSISTENT_CK] } {\n            set sp_persistent_ck_value [HTTP::cookie value $static::SP_PERSISTENT_CK]\n            if { $sp_persistent_ck_value != \"\" && [ACCESS::session exists -state_allow $sp_persistent_ck_value] } {\n                if {not ([catch {HTTP::cookie insert name \"MRHSession\" value $sp_persistent_ck_value}]) } {\n                    call write_log debug \"Restored persistent cookie for sid: ($sp_persistent_ck_value)\"\n                    set f_allow_session 1\n                    return\n                } else {\n                    call write_log error \"Restoring persistent cookie failed for sid: ($sp_persistent_ck_value)\"\n                    unset sp_persistent_ck_value\n                }\n            } else {\n                unset sp_persistent_ck_value\n            }\n        }\n        if { !($f_allow_session) && $http_path != $static::MS_OFBA_AUTH_REQ_URI } {\n            if { $ms_ofba_auth_cookie == $static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE } {\n                if { ![call is_ofba_passthrough_uri $http_path]  } {\n                    call write_log debug \"Redirecting for MS OFBA, based on auth type\"\n                    HTTP::respond 302 -version 1.1 -noserver Location $static::MS_OFBA_AUTH_REQ_URI\n                }\n            } else {\n                call write_log debug \"Responding 403 for MS OFBA initiation\"\n                if {$ofba_auth_dialog_sz == \"\"} {\n                    set ofba_auth_dialog_sz $static::MS_OFBA_AUTH_DIALOG_SZ\n                }\n                HTTP::respond 403 -version \"1.1\" noserver \\\n                    \"X-FORMS_BASED_AUTH_REQUIRED\" \"https://[HTTP::host]$static::MS_OFBA_AUTH_REQ_URI\" \\\n                    \"X-FORMS_BASED_AUTH_RETURN_URL\" \"https://[HTTP::host]$static::MS_OFBA_AUTH_RETURN_URI\" \\\n                    \"X-FORMS_BASED_AUTH_DIALOG_SIZE\" $ofba_auth_dialog_sz \\\n                    \"Set-Cookie\" \"MRHSession=deleted; expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;secure\" \\\n                    \"Set-Cookie\" \"LastMRH_Session=deleted; expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;secure\" \\\n                    \"Set-Cookie\" \"$static::MS_OFBA_AUTH_TYPE_COOKIE=$static::MS_OFBA_AUTH_TYPE_COOKIE_VALUE;path=/;secure;HttpOnly\" \\\n                    \"Connection\" \"Close\"\n            }\n        }\n    }\n    when HTTP_RESPONSE {\n        if { $f_sp_persistent_ck == \"1\" && ([info exists ms_sp_client_type] && $ms_sp_client_type == \"browser\") && $session_id != \"\"} {\n            if {$sp_persistent_ck_timeout == \"\"} {\n                set sp_persistent_ck_timeout $static::SP_PERSISTENT_CK_TIMEOUT\n            }\n            call write_log debug \"Set-Cookie for SharePoint persistent cookie: ($static::SP_PERSISTENT_CK) for sid: ($session_id), having timeout: ($sp_persistent_ck_timeout)\"\n            HTTP::cookie remove $static::SP_PERSISTENT_CK\n            HTTP::cookie insert name $static::SP_PERSISTENT_CK value $session_id path \"/\"\n            HTTP::cookie expires $static::SP_PERSISTENT_CK $sp_persistent_ck_timeout relative\n            HTTP::cookie secure $static::SP_PERSISTENT_CK enable\n            HTTP::cookie httponly $static::SP_PERSISTENT_CK enable\n        } elseif { [info exists sp_persistent_ck_value] && $sp_persistent_ck_value ne \"\" } {\n            call write_log debug \"Restoring Cookie for MRHSession from persistent cookie: ($sp_persistent_ck_value)\"\n            HTTP::cookie insert name MRHSession value $sp_persistent_ck_value path \"/\"\n            HTTP::cookie secure MRHSession enable\n            unset sp_persistent_ck_value\n        }\n    }\n    when ACCESS_SESSION_STARTED {\n        if { ![info exists ms_sp_client_type] || $ms_sp_client_type != \"ms-ofba\"} {\n            return\n        }\n        ACCESS::session data set session.client.type $static::MS_OFBA_ENABLED_CLIENT_TYPE\n    }\n    when ACCESS_ACL_ALLOWED {\n        switch -glob -- [string tolower [HTTP::path]] $static::MS_OFBA_AUTH_REQ_URI {\n            ACCESS::respond 302 noserver Location \"https://[HTTP::host]$static::MS_OFBA_AUTH_RETURN_URI\"\n        } $static::MS_OFBA_AUTH_RETURN_URI {\n            ACCESS::respond 200 content $static::MS_OFBA_AUTH_SUCCESS_BODY noserver \\\n                \"Set-Cookie\" \"$static::MS_OFBA_AUTH_TYPE_COOKIE=deleted;expires=Thu, 01 Jan 1970 00:00:00 GMT;;path=/;secure;HttpOnly\"\n        } \"*/signout.aspx\" {\n            ACCESS::respond 302 noserver Location \"/vdesk/hangup.php3\"\n                return\n        } \"/_layouts/accessdenied.aspx\" {\n            if {[string tolower [URI::query [HTTP::uri] loginasanotheruser]] equals \"true\" } {\n                ACCESS::session remove\n                ACCESS::respond 302 noserver Location \"/\"\n                return\n            }\n        } default {\n        }\n    }\ndefinition-signature iZGf55ghe/SCmAy8oGgqDG4kibmmFg8ihZSkO7sORsHNAuJQqpPx7PKcqlIYve4AAqLkb8tUEtxgzVV4uXZ73v5t7/DVszSnyeju+HypimEtP2crzjGlxCAxNe2hnOesZkA/6lCrcPah0MjRnQTef8vwfmQ0eKro0guM/TV+8HjyUVH2CLrPVRhEhTfwX/zlkpe6u9ZJTmNNuQVRcKRvlWPnv/6cWYPMlNPI30EMIYK6mapONBv7tY9Ojurr7FddOxG1hGctFh3Z8ufTSo81dUXrsFtba/8TwSbHYBWHs3rRZvmcv1OesnoWrFJ4E3ndmTNM76kXLylbzl7x4a1ZVQ==",
    "sys file external-monitor arg_example": {
        "system-path": "\"/config/monitors/arg_example\""
    },
    "sys file external-monitor sample_monitor": {
        "system-path": "\"/config/monitors/sample_monitor\""
    },
    "sys file external-monitor paap_version_monitor": {
        "system-path": "\"/config/monitors/paap_version_sample\""
    },
    "sys file ssl-cert f5-irule.crt": {
        "system-path": "\"/config/ssl/ssl.crt/f5-irule.crt\""
    },
    "sys file ssl-cert /Common/f5-ca-bundle.crt": {
        "system-path": "\"/config/ssl/ssl.crt/f5-ca-bundle.crt\""
    },
    "sys file ssl-cert /Common/default.crt": {
        "system-path": "\"/config/ssl/ssl.crt/default.crt\""
    },
    "sys file ssl-cert /Common/ca-bundle.crt": {
        "system-path": "\"/config/ssl/ssl.crt/ca-bundle.crt\""
    },
    "sys file ssl-key default.key": {
        "system-path": "\"/config/ssl/ssl.key/default.key\""
    },
    "sys crypto ca-bundle-manager ca-bundle": {
        "include-url": {
            "https://cdn.f5.com/product/ca-bundle/blended-bundle.crt": ""
        },
        "trusted-ca-bundle": "/Common/f5-ca-bundle.crt"
    },
    "sys url-db download-schedule urldb": {
        "start-time": "01:00",
        "end-time": "03:00"
    },
    "sys crypto allow-key-export": {
        "value": "enabled"
    },
    "sys crypto acceleration-strategy": {
        "fixed-ratio": "1000"
    },
    "apm profile access access": {
        "default-language": "\"en\"",
        "accept-languages": "{\"en\"}"
    },
    "apm resource remote-desktop citrix-client-bundle default-citrix-client-bundle": {},
    "apm client-packaging client-packaging": {},
    "apm profile connectivity connectivity": {
        "compression-codecs": [
            "deflate",
            "lzo",
            "bzip2"
        ],
        "compression": "enabled",
        "client-policy": {
            "connectivity_clientPolicy": {}
        },
        "citrix-client-bundle": "/Common/default-citrix-client-bundle"
    },
    "apm profile remote-desktop remotedesktop": {},
    "apm profile exchange exchange": {
        "active-sync-auth-type": "basic",
        "active-sync-sso-config": "none",
        "active-sync-url": "\"/microsoft-server-activesync*\"",
        "auto-discover-auth-type": "basic",
        "auto-discover-sso-config": "none",
        "auto-discover-url": "\"/autodiscover/*\"",
        "ntlm-auth-name": "none",
        "offline-address-book-auth-type": "basic",
        "offline-address-book-sso-config": "none",
        "offline-address-book-url": "\"/oab/*\"",
        "rpc-over-http-auth-type": "basic",
        "rpc-over-http-sso-config": "none",
        "rpc-over-http-url": "\"/rpc/rpcproxy.dll\"",
        "user-agent-pattern-for-utf8": "\"Android*\"",
        "web-service-auth-type": "basic",
        "web-service-sso-config": "none",
        "web-service-url": "\"/ews/*\""
    },
    "apm profile eca eca": {},
    "apm profile vdi vdi": {},
    "apm profile webssh webssh": {},
    "apm apm-avr-config apm-avr-config": {
        "avr-collect-data": "true",
        "avr-sampling": "true"
    },
    "apm profile oauth oauth": {
        "db-instance": "/Common/oauthdb"
    },
    "apm profile oauthplugin oauthplugin": {},
    "apm profile ping-access pingaccess": {},
    "apm ephemeral-auth ldap-auth profile ldapauth": {},
    "apm ephemeral-auth radius-auth profile radiusauth": {},
    "wom profile isession isession": {
        "compression-codecs": [
            "deflate",
            "lzo",
            "bzip2"
        ],
        "compression": "enabled"
    },
    "wom profile isession isession-encrypt": {
        "data-encryption": "enabled"
    },
    "wom profile isession isession-softwoc": {
        "defaults-from": "/Common/isession",
        "deduplication": "disabled"
    },
    "net ipsec ike-peer anonymous": {
        "my-cert-file": "/Common/default.crt",
        "my-cert-key-file": "/Common/default.key",
        "my-id-type": "asn1dn",
        "peers-id-type": "asn1dn",
        "state": "disabled",
        "verify-cert": "false"
    },
    "sys log-config publisher default-ipsec-log-publisher": {
        "destinations": {
            "/Common/local-syslog": ""
        }
    },
    "saas ap-ai profile ap-ai": {},
    "saas ati profile ati": {},
    "saas csd profile csd": {},
    "saas bd profile bd": {},
    "pem profile spm spm": {},
    "pem profile subscriber-mgmt subscriber-mgmt": {},
    "pem profile diameter-endpoint diameter-endpoint": {
        "product-name": "\"BIG-IP\"",
        "gx-session-id-prefix": "\"Gx.BIG-IP.f5net.com\"",
        "gy-session-id-prefix": "\"Gy.BIG-IP.f5net.com\"",
        "sd-session-id-prefix": "\"Sd.BIG-IP.f5net.com\"",
        "msg-retransmit-delay": "1500",
        "msg-max-retransmits": "2",
        "fatal-grace-time": {}
    },
    "pem profile radius-aaa radiusaaa": {},
    "ltm classification ce ce": {
        "flow-bundling": "on",
        "allow-reclassification": "on",
        "cache-results": "on"
    },
    "ltm classification ce ce_pem": {
        "flow-bundling": "on",
        "allow-reclassification": "on",
        "cache-results": "on"
    },
    "ltm classification ce ce_apm_swg": {
        "flow-bundling": "on",
        "allow-reclassification": "on",
        "cache-results": "off"
    },
    "ltm classification ce ce_afm": {
        "flow-bundling": "on",
        "allow-reclassification": "off",
        "cache-results": "off"
    },
    "sys log-config publisher default-mgmt-acl-log-publisher": {},
    "api-protection profile apiprotection apiprotection": {},
    "net dns-resolver f5-aws-dns": {
        "forward-zones": {
            "shpapi.com": {
                "nameservers": {
                    "8.8.8.8:53": {}
                }
            },
            "amazonaws.com": {
                "nameservers": {
                    "8.8.8.8:53": {}
                }
            },
            "idservice.net": {
                "nameservers": {
                    "8.8.8.8:53": {}
                }
            }
        },
        "route-domain": "/Common/0"
    }
}